
MicrowaveRTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000bc  00800060  000013f8  0000148c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000053  0080011c  0080011c  00001548  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001578  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002769  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd0  00000000  00000000  00003fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000149b  00000000  00000000  00004d95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000720  00000000  00000000  00006230  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d49  00000000  00000000  00006950  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e59  00000000  00000000  00007699  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  000094f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 31       	cpi	r26, 0x1C	; 28
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ac e1       	ldi	r26, 0x1C	; 28
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 36       	cpi	r26, 0x6F	; 111
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 20 06 	call	0xc40	; 0xc40 <main>
      8a:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <HKPD_voidInitializeKeypad>:
 * Description : initialize 4X4 keypad at a given port set 4 pins output and 4 pins input
 * Arguments   : void
 * Return      : void  
 */
 void HKPD_voidInitializeKeypad(void)
 {
      92:	cf 92       	push	r12
      94:	df 92       	push	r13
      96:	ef 92       	push	r14
      98:	ff 92       	push	r15
      9a:	0f 93       	push	r16
      9c:	1f 93       	push	r17
      9e:	cf 93       	push	r28
      a0:	df 93       	push	r29
      a2:	04 e6       	ldi	r16, 0x64	; 100
      a4:	10 e0       	ldi	r17, 0x00	; 0
      a6:	c0 e6       	ldi	r28, 0x60	; 96
      a8:	d0 e0       	ldi	r29, 0x00	; 0
      aa:	0f 2e       	mov	r0, r31
      ac:	f4 e6       	ldi	r31, 0x64	; 100
      ae:	cf 2e       	mov	r12, r31
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	df 2e       	mov	r13, r31
      b4:	f0 2d       	mov	r31, r0
	
	 /*for loop to scan all keypad columns and rows*/
	 for (u8 i = 0 ; i<4 ; i++)
	 {
	 	 /*set column current bit in ColumnArray[] OUTPUT*/
		 MDIO_u8SetDirectionBit(KEYPAD_PORT,HKPD_u8ColumnArray[i],MDIO_OUTPUT);
      b6:	f8 01       	movw	r30, r16
      b8:	61 91       	ld	r22, Z+
      ba:	8f 01       	movw	r16, r30
      bc:	41 e0       	ldi	r20, 0x01	; 1
      be:	84 e0       	ldi	r24, 0x04	; 4
      c0:	0e 94 43 06 	call	0xc86	; 0xc86 <MDIO_u8SetDirectionBit>
      c4:	7e 01       	movw	r14, r28
	
		 /*set current bit in RowArray[] INPUT*/
		 MDIO_u8SetDirectionBit(KEYPAD_PORT,HKPD_u8RowArray[i],MDIO_INPUT);
      c6:	40 e0       	ldi	r20, 0x00	; 0
      c8:	69 91       	ld	r22, Y+
      ca:	84 e0       	ldi	r24, 0x04	; 4
      cc:	0e 94 43 06 	call	0xc86	; 0xc86 <MDIO_u8SetDirectionBit>
		
		 /*Enable pull up resistor for current bit in RowArray[]*/
		 MDIO_u8ConfigPullupBit(KEYPAD_PORT,HKPD_u8RowArray[i],MDIO_EN_PULL_UP_RES);
      d0:	41 e0       	ldi	r20, 0x01	; 1
      d2:	f7 01       	movw	r30, r14
      d4:	60 81       	ld	r22, Z
      d6:	84 e0       	ldi	r24, 0x04	; 4
      d8:	0e 94 84 07 	call	0xf08	; 0xf08 <MDIO_u8ConfigPullupBit>
 */
 void HKPD_voidInitializeKeypad(void)
 {
	
	 /*for loop to scan all keypad columns and rows*/
	 for (u8 i = 0 ; i<4 ; i++)
      dc:	cc 15       	cp	r28, r12
      de:	dd 05       	cpc	r29, r13
      e0:	51 f7       	brne	.-44     	; 0xb6 <HKPD_voidInitializeKeypad+0x24>
		 /*Enable pull up resistor for current bit in RowArray[]*/
		 MDIO_u8ConfigPullupBit(KEYPAD_PORT,HKPD_u8RowArray[i],MDIO_EN_PULL_UP_RES);
		
	 }/*end of for loop*/
	
 }/*end of HKPD_voidInitializeKeypad()*/
      e2:	df 91       	pop	r29
      e4:	cf 91       	pop	r28
      e6:	1f 91       	pop	r17
      e8:	0f 91       	pop	r16
      ea:	ff 90       	pop	r15
      ec:	ef 90       	pop	r14
      ee:	df 90       	pop	r13
      f0:	cf 90       	pop	r12
      f2:	08 95       	ret

000000f4 <HKPD_u8GetPressedKey>:
 * Description : Return which key in the keypad has been pressed
 * Arguments   : void
 * return      : u8 pressed key
 */
 u8 HKPD_u8GetPressedKey(void)
 {
      f4:	6f 92       	push	r6
      f6:	7f 92       	push	r7
      f8:	8f 92       	push	r8
      fa:	9f 92       	push	r9
      fc:	af 92       	push	r10
      fe:	bf 92       	push	r11
     100:	cf 92       	push	r12
     102:	df 92       	push	r13
     104:	ef 92       	push	r14
     106:	ff 92       	push	r15
     108:	0f 93       	push	r16
     10a:	1f 93       	push	r17
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	0f 2e       	mov	r0, r31
     112:	f4 e6       	ldi	r31, 0x64	; 100
     114:	ef 2e       	mov	r14, r31
     116:	f0 e0       	ldi	r31, 0x00	; 0
     118:	ff 2e       	mov	r15, r31
     11a:	f0 2d       	mov	r31, r0
     11c:	08 e6       	ldi	r16, 0x68	; 104
     11e:	10 e0       	ldi	r17, 0x00	; 0
     120:	e7 01       	movw	r28, r14
	 
	/*for loop to set all column pins HIGH*/
	for (u8 i = 0; i<4 ;i++ )
	{
		/*set current pin in ColumnArray HIGH*/
		MDIO_u8WriteBit(KEYPAD_PORT,HKPD_u8ColumnArray[i],MDIO_HIGH);
     122:	69 91       	ld	r22, Y+
     124:	41 e0       	ldi	r20, 0x01	; 1
     126:	84 e0       	ldi	r24, 0x04	; 4
     128:	0e 94 cb 06 	call	0xd96	; 0xd96 <MDIO_u8WriteBit>
 */
 u8 HKPD_u8GetPressedKey(void)
 {
	 
	/*for loop to set all column pins HIGH*/
	for (u8 i = 0; i<4 ;i++ )
     12c:	c0 17       	cp	r28, r16
     12e:	d1 07       	cpc	r29, r17
     130:	c1 f7       	brne	.-16     	; 0x122 <HKPD_u8GetPressedKey+0x2e>
     132:	c1 2c       	mov	r12, r1
     134:	d1 2c       	mov	r13, r1
	
	/*for loop to scan all keypad columns*/
	for (u8 i = 0 ; i<4 ; i++)
	{
		/*set current column pin low to test all row pins to find out which button has been pressed*/
		MDIO_u8WriteBit(KEYPAD_PORT,HKPD_u8ColumnArray[i],MDIO_LOW);
     136:	46 01       	movw	r8, r12
     138:	57 01       	movw	r10, r14
     13a:	40 e0       	ldi	r20, 0x00	; 0
     13c:	f7 01       	movw	r30, r14
     13e:	60 81       	ld	r22, Z
     140:	84 e0       	ldi	r24, 0x04	; 4
     142:	0e 94 cb 06 	call	0xd96	; 0xd96 <MDIO_u8WriteBit>
     146:	c0 e6       	ldi	r28, 0x60	; 96
     148:	d0 e0       	ldi	r29, 0x00	; 0
     14a:	61 2c       	mov	r6, r1
     14c:	71 2c       	mov	r7, r1
		
		/*for loop to scan and test all keypad row pins*/
		for (u8 j = 0 ; j<4 ; j++)
		{
			/*check current row pin value*/
			if ( MDIO_LOW == MDIO_u8ReadBit(KEYPAD_PORT,HKPD_u8RowArray[j]) )
     14e:	83 01       	movw	r16, r6
     150:	69 91       	ld	r22, Y+
     152:	84 e0       	ldi	r24, 0x04	; 4
     154:	0e 94 4f 07 	call	0xe9e	; 0xe9e <MDIO_u8ReadBit>
     158:	81 11       	cpse	r24, r1
     15a:	0b c0       	rjmp	.+22     	; 0x172 <HKPD_u8GetPressedKey+0x7e>
			{
				/*return pressed button value*/
				return KeyPadArr[j][i];
     15c:	00 0f       	add	r16, r16
     15e:	11 1f       	adc	r17, r17
     160:	00 0f       	add	r16, r16
     162:	11 1f       	adc	r17, r17
     164:	01 59       	subi	r16, 0x91	; 145
     166:	1f 4f       	sbci	r17, 0xFF	; 255
     168:	f8 01       	movw	r30, r16
     16a:	e8 0d       	add	r30, r8
     16c:	f9 1d       	adc	r31, r9
     16e:	80 81       	ld	r24, Z
     170:	18 c0       	rjmp	.+48     	; 0x1a2 <HKPD_u8GetPressedKey+0xae>
     172:	ff ef       	ldi	r31, 0xFF	; 255
     174:	6f 1a       	sub	r6, r31
     176:	7f 0a       	sbc	r7, r31
	{
		/*set current column pin low to test all row pins to find out which button has been pressed*/
		MDIO_u8WriteBit(KEYPAD_PORT,HKPD_u8ColumnArray[i],MDIO_LOW);
		
		/*for loop to scan and test all keypad row pins*/
		for (u8 j = 0 ; j<4 ; j++)
     178:	84 e0       	ldi	r24, 0x04	; 4
     17a:	68 16       	cp	r6, r24
     17c:	71 04       	cpc	r7, r1
     17e:	39 f7       	brne	.-50     	; 0x14e <HKPD_u8GetPressedKey+0x5a>
     180:	ef ef       	ldi	r30, 0xFF	; 255
     182:	ee 1a       	sub	r14, r30
     184:	fe 0a       	sbc	r15, r30
				return KeyPadArr[j][i];
			}	
		}/*end of for loop*/
		
		/*set current column pin HIGH again*/
		MDIO_u8WriteBit(KEYPAD_PORT,HKPD_u8ColumnArray[i],MDIO_HIGH);
     186:	41 e0       	ldi	r20, 0x01	; 1
     188:	f5 01       	movw	r30, r10
     18a:	60 81       	ld	r22, Z
     18c:	84 e0       	ldi	r24, 0x04	; 4
     18e:	0e 94 cb 06 	call	0xd96	; 0xd96 <MDIO_u8WriteBit>
     192:	ff ef       	ldi	r31, 0xFF	; 255
     194:	cf 1a       	sub	r12, r31
     196:	df 0a       	sbc	r13, r31
		MDIO_u8WriteBit(KEYPAD_PORT,HKPD_u8ColumnArray[i],MDIO_HIGH);
		
	}/*end of for loop*/
	
	/*for loop to scan all keypad columns*/
	for (u8 i = 0 ; i<4 ; i++)
     198:	84 e0       	ldi	r24, 0x04	; 4
     19a:	c8 16       	cp	r12, r24
     19c:	d1 04       	cpc	r13, r1
     19e:	59 f6       	brne	.-106    	; 0x136 <HKPD_u8GetPressedKey+0x42>
		MDIO_u8WriteBit(KEYPAD_PORT,HKPD_u8ColumnArray[i],MDIO_HIGH);
		
	}/*end of for loop*/	
	
	/*Report no Button pressed*/
	return '?';
     1a0:	8f e3       	ldi	r24, 0x3F	; 63
		
}/*end of HKPD_u8GetPressedKey()*/
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	1f 91       	pop	r17
     1a8:	0f 91       	pop	r16
     1aa:	ff 90       	pop	r15
     1ac:	ef 90       	pop	r14
     1ae:	df 90       	pop	r13
     1b0:	cf 90       	pop	r12
     1b2:	bf 90       	pop	r11
     1b4:	af 90       	pop	r10
     1b6:	9f 90       	pop	r9
     1b8:	8f 90       	pop	r8
     1ba:	7f 90       	pop	r7
     1bc:	6f 90       	pop	r6
     1be:	08 95       	ret

000001c0 <HLCD_voidWriteData>:
		  /*Shift cursor one step Left instruction*/
		  HLCD_voidWriteCommand(HLCD_CURSOR_SHIFT_LEFT); 
		  
	  }/*end of steps for loop*/
	  
  }/*end of HLCD_voidCursorShiftLeft()*/
     1c0:	ef 92       	push	r14
     1c2:	ff 92       	push	r15
     1c4:	0f 93       	push	r16
     1c6:	1f 93       	push	r17
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	e8 2e       	mov	r14, r24
     1ce:	40 e0       	ldi	r20, 0x00	; 0
     1d0:	61 e0       	ldi	r22, 0x01	; 1
     1d2:	82 e0       	ldi	r24, 0x02	; 2
     1d4:	0e 94 cb 06 	call	0xd96	; 0xd96 <MDIO_u8WriteBit>
     1d8:	41 e0       	ldi	r20, 0x01	; 1
     1da:	62 e0       	ldi	r22, 0x02	; 2
     1dc:	82 e0       	ldi	r24, 0x02	; 2
     1de:	0e 94 cb 06 	call	0xd96	; 0xd96 <MDIO_u8WriteBit>
     1e2:	c4 e0       	ldi	r28, 0x04	; 4
     1e4:	d0 e0       	ldi	r29, 0x00	; 0
     1e6:	f1 2c       	mov	r15, r1
     1e8:	87 01       	movw	r16, r14
     1ea:	a7 01       	movw	r20, r14
     1ec:	0c 2e       	mov	r0, r28
     1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <HLCD_voidWriteData+0x34>
     1f0:	55 95       	asr	r21
     1f2:	47 95       	ror	r20
     1f4:	0a 94       	dec	r0
     1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <HLCD_voidWriteData+0x30>
     1f8:	41 70       	andi	r20, 0x01	; 1
     1fa:	6c 2f       	mov	r22, r28
     1fc:	82 e0       	ldi	r24, 0x02	; 2
     1fe:	0e 94 cb 06 	call	0xd96	; 0xd96 <MDIO_u8WriteBit>
     202:	21 96       	adiw	r28, 0x01	; 1
     204:	c8 30       	cpi	r28, 0x08	; 8
     206:	d1 05       	cpc	r29, r1
     208:	79 f7       	brne	.-34     	; 0x1e8 <HLCD_voidWriteData+0x28>
     20a:	41 e0       	ldi	r20, 0x01	; 1
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	82 e0       	ldi	r24, 0x02	; 2
     210:	0e 94 cb 06 	call	0xd96	; 0xd96 <MDIO_u8WriteBit>
     214:	62 e0       	ldi	r22, 0x02	; 2
     216:	70 e0       	ldi	r23, 0x00	; 0
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 be 02 	call	0x57c	; 0x57c <LDelay_voidDelay_ms>
     220:	40 e0       	ldi	r20, 0x00	; 0
     222:	60 e0       	ldi	r22, 0x00	; 0
     224:	82 e0       	ldi	r24, 0x02	; 2
     226:	0e 94 cb 06 	call	0xd96	; 0xd96 <MDIO_u8WriteBit>
     22a:	c4 e0       	ldi	r28, 0x04	; 4
     22c:	e1 2c       	mov	r14, r1
     22e:	f1 2c       	mov	r15, r1
     230:	a8 01       	movw	r20, r16
     232:	0e 2c       	mov	r0, r14
     234:	02 c0       	rjmp	.+4      	; 0x23a <HLCD_voidWriteData+0x7a>
     236:	55 95       	asr	r21
     238:	47 95       	ror	r20
     23a:	0a 94       	dec	r0
     23c:	e2 f7       	brpl	.-8      	; 0x236 <HLCD_voidWriteData+0x76>
     23e:	41 70       	andi	r20, 0x01	; 1
     240:	6c 2f       	mov	r22, r28
     242:	82 e0       	ldi	r24, 0x02	; 2
     244:	0e 94 cb 06 	call	0xd96	; 0xd96 <MDIO_u8WriteBit>
     248:	8f ef       	ldi	r24, 0xFF	; 255
     24a:	e8 1a       	sub	r14, r24
     24c:	f8 0a       	sbc	r15, r24
     24e:	cf 5f       	subi	r28, 0xFF	; 255
     250:	c8 30       	cpi	r28, 0x08	; 8
     252:	71 f7       	brne	.-36     	; 0x230 <HLCD_voidWriteData+0x70>
     254:	41 e0       	ldi	r20, 0x01	; 1
     256:	60 e0       	ldi	r22, 0x00	; 0
     258:	82 e0       	ldi	r24, 0x02	; 2
     25a:	0e 94 cb 06 	call	0xd96	; 0xd96 <MDIO_u8WriteBit>
     25e:	62 e0       	ldi	r22, 0x02	; 2
     260:	70 e0       	ldi	r23, 0x00	; 0
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	0e 94 be 02 	call	0x57c	; 0x57c <LDelay_voidDelay_ms>
     26a:	40 e0       	ldi	r20, 0x00	; 0
     26c:	60 e0       	ldi	r22, 0x00	; 0
     26e:	82 e0       	ldi	r24, 0x02	; 2
     270:	0e 94 cb 06 	call	0xd96	; 0xd96 <MDIO_u8WriteBit>
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	1f 91       	pop	r17
     27a:	0f 91       	pop	r16
     27c:	ff 90       	pop	r15
     27e:	ef 90       	pop	r14
     280:	08 95       	ret

00000282 <HLCD_voidWriteCommand>:
     282:	ef 92       	push	r14
     284:	ff 92       	push	r15
     286:	0f 93       	push	r16
     288:	1f 93       	push	r17
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
     28e:	e8 2e       	mov	r14, r24
     290:	40 e0       	ldi	r20, 0x00	; 0
     292:	61 e0       	ldi	r22, 0x01	; 1
     294:	82 e0       	ldi	r24, 0x02	; 2
     296:	0e 94 cb 06 	call	0xd96	; 0xd96 <MDIO_u8WriteBit>
     29a:	40 e0       	ldi	r20, 0x00	; 0
     29c:	62 e0       	ldi	r22, 0x02	; 2
     29e:	82 e0       	ldi	r24, 0x02	; 2
     2a0:	0e 94 cb 06 	call	0xd96	; 0xd96 <MDIO_u8WriteBit>
     2a4:	c4 e0       	ldi	r28, 0x04	; 4
     2a6:	d0 e0       	ldi	r29, 0x00	; 0
     2a8:	f1 2c       	mov	r15, r1
     2aa:	87 01       	movw	r16, r14
     2ac:	a7 01       	movw	r20, r14
     2ae:	0c 2e       	mov	r0, r28
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <HLCD_voidWriteCommand+0x34>
     2b2:	55 95       	asr	r21
     2b4:	47 95       	ror	r20
     2b6:	0a 94       	dec	r0
     2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <HLCD_voidWriteCommand+0x30>
     2ba:	41 70       	andi	r20, 0x01	; 1
     2bc:	6c 2f       	mov	r22, r28
     2be:	82 e0       	ldi	r24, 0x02	; 2
     2c0:	0e 94 cb 06 	call	0xd96	; 0xd96 <MDIO_u8WriteBit>
     2c4:	21 96       	adiw	r28, 0x01	; 1
     2c6:	c8 30       	cpi	r28, 0x08	; 8
     2c8:	d1 05       	cpc	r29, r1
     2ca:	79 f7       	brne	.-34     	; 0x2aa <HLCD_voidWriteCommand+0x28>
     2cc:	41 e0       	ldi	r20, 0x01	; 1
     2ce:	60 e0       	ldi	r22, 0x00	; 0
     2d0:	82 e0       	ldi	r24, 0x02	; 2
     2d2:	0e 94 cb 06 	call	0xd96	; 0xd96 <MDIO_u8WriteBit>
     2d6:	62 e0       	ldi	r22, 0x02	; 2
     2d8:	70 e0       	ldi	r23, 0x00	; 0
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	0e 94 be 02 	call	0x57c	; 0x57c <LDelay_voidDelay_ms>
     2e2:	40 e0       	ldi	r20, 0x00	; 0
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	82 e0       	ldi	r24, 0x02	; 2
     2e8:	0e 94 cb 06 	call	0xd96	; 0xd96 <MDIO_u8WriteBit>
     2ec:	c4 e0       	ldi	r28, 0x04	; 4
     2ee:	e1 2c       	mov	r14, r1
     2f0:	f1 2c       	mov	r15, r1
     2f2:	a8 01       	movw	r20, r16
     2f4:	0e 2c       	mov	r0, r14
     2f6:	02 c0       	rjmp	.+4      	; 0x2fc <HLCD_voidWriteCommand+0x7a>
     2f8:	55 95       	asr	r21
     2fa:	47 95       	ror	r20
     2fc:	0a 94       	dec	r0
     2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <HLCD_voidWriteCommand+0x76>
     300:	41 70       	andi	r20, 0x01	; 1
     302:	6c 2f       	mov	r22, r28
     304:	82 e0       	ldi	r24, 0x02	; 2
     306:	0e 94 cb 06 	call	0xd96	; 0xd96 <MDIO_u8WriteBit>
     30a:	8f ef       	ldi	r24, 0xFF	; 255
     30c:	e8 1a       	sub	r14, r24
     30e:	f8 0a       	sbc	r15, r24
     310:	cf 5f       	subi	r28, 0xFF	; 255
     312:	c8 30       	cpi	r28, 0x08	; 8
     314:	71 f7       	brne	.-36     	; 0x2f2 <HLCD_voidWriteCommand+0x70>
     316:	41 e0       	ldi	r20, 0x01	; 1
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	82 e0       	ldi	r24, 0x02	; 2
     31c:	0e 94 cb 06 	call	0xd96	; 0xd96 <MDIO_u8WriteBit>
     320:	62 e0       	ldi	r22, 0x02	; 2
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 be 02 	call	0x57c	; 0x57c <LDelay_voidDelay_ms>
     32c:	40 e0       	ldi	r20, 0x00	; 0
     32e:	60 e0       	ldi	r22, 0x00	; 0
     330:	82 e0       	ldi	r24, 0x02	; 2
     332:	0e 94 cb 06 	call	0xd96	; 0xd96 <MDIO_u8WriteBit>
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	1f 91       	pop	r17
     33c:	0f 91       	pop	r16
     33e:	ff 90       	pop	r15
     340:	ef 90       	pop	r14
     342:	08 95       	ret

00000344 <HLCD_voidInitializeLCD>:
     344:	ef 92       	push	r14
     346:	ff 92       	push	r15
     348:	0f 93       	push	r16
     34a:	1f 93       	push	r17
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	41 e0       	ldi	r20, 0x01	; 1
     352:	62 e0       	ldi	r22, 0x02	; 2
     354:	82 e0       	ldi	r24, 0x02	; 2
     356:	0e 94 43 06 	call	0xc86	; 0xc86 <MDIO_u8SetDirectionBit>
     35a:	41 e0       	ldi	r20, 0x01	; 1
     35c:	61 e0       	ldi	r22, 0x01	; 1
     35e:	82 e0       	ldi	r24, 0x02	; 2
     360:	0e 94 43 06 	call	0xc86	; 0xc86 <MDIO_u8SetDirectionBit>
     364:	41 e0       	ldi	r20, 0x01	; 1
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	82 e0       	ldi	r24, 0x02	; 2
     36a:	0e 94 43 06 	call	0xc86	; 0xc86 <MDIO_u8SetDirectionBit>
     36e:	61 e0       	ldi	r22, 0x01	; 1
     370:	82 e0       	ldi	r24, 0x02	; 2
     372:	0e 94 27 06 	call	0xc4e	; 0xc4e <MDIO_u8SetDirectionReg>
     376:	62 e3       	ldi	r22, 0x32	; 50
     378:	70 e0       	ldi	r23, 0x00	; 0
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 be 02 	call	0x57c	; 0x57c <LDelay_voidDelay_ms>
     382:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <FontSizeAndLineCommand>
     386:	8b 7f       	andi	r24, 0xFB	; 251
     388:	88 60       	ori	r24, 0x08	; 8
     38a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <FontSizeAndLineCommand>
     38e:	82 e2       	ldi	r24, 0x22	; 34
     390:	0e 94 41 01 	call	0x282	; 0x282 <HLCD_voidWriteCommand>
     394:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <FontSizeAndLineCommand>
     398:	0e 94 41 01 	call	0x282	; 0x282 <HLCD_voidWriteCommand>
     39c:	61 e0       	ldi	r22, 0x01	; 1
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 be 02 	call	0x57c	; 0x57c <LDelay_voidDelay_ms>
     3a8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <DisplayAndCursorCommand>
     3ac:	0e 94 41 01 	call	0x282	; 0x282 <HLCD_voidWriteCommand>
     3b0:	61 e0       	ldi	r22, 0x01	; 1
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	0e 94 be 02 	call	0x57c	; 0x57c <LDelay_voidDelay_ms>
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	0e 94 41 01 	call	0x282	; 0x282 <HLCD_voidWriteCommand>
     3c2:	62 e0       	ldi	r22, 0x02	; 2
     3c4:	70 e0       	ldi	r23, 0x00	; 0
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	0e 94 be 02 	call	0x57c	; 0x57c <LDelay_voidDelay_ms>
     3ce:	86 e0       	ldi	r24, 0x06	; 6
     3d0:	0e 94 41 01 	call	0x282	; 0x282 <HLCD_voidWriteCommand>
     3d4:	62 e0       	ldi	r22, 0x02	; 2
     3d6:	70 e0       	ldi	r23, 0x00	; 0
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	0e 94 be 02 	call	0x57c	; 0x57c <LDelay_voidDelay_ms>
     3e0:	80 e4       	ldi	r24, 0x40	; 64
     3e2:	0e 94 41 01 	call	0x282	; 0x282 <HLCD_voidWriteCommand>
     3e6:	cf e7       	ldi	r28, 0x7F	; 127
     3e8:	d0 e0       	ldi	r29, 0x00	; 0
     3ea:	0f 2e       	mov	r0, r31
     3ec:	ff eb       	ldi	r31, 0xBF	; 191
     3ee:	ef 2e       	mov	r14, r31
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	ff 2e       	mov	r15, r31
     3f4:	f0 2d       	mov	r31, r0
     3f6:	0a c0       	rjmp	.+20     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3f8:	89 91       	ld	r24, Y+
     3fa:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <HLCD_voidWriteData>
     3fe:	c0 17       	cp	r28, r16
     400:	d1 07       	cpc	r29, r17
     402:	d1 f7       	brne	.-12     	; 0x3f8 <HLCD_voidInitializeLCD+0xb4>
     404:	e8 01       	movw	r28, r16
     406:	e0 16       	cp	r14, r16
     408:	f1 06       	cpc	r15, r17
     40a:	21 f0       	breq	.+8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     40c:	8e 01       	movw	r16, r28
     40e:	08 5f       	subi	r16, 0xF8	; 248
     410:	1f 4f       	sbci	r17, 0xFF	; 255
     412:	f2 cf       	rjmp	.-28     	; 0x3f8 <HLCD_voidInitializeLCD+0xb4>
     414:	80 e8       	ldi	r24, 0x80	; 128
     416:	0e 94 41 01 	call	0x282	; 0x282 <HLCD_voidWriteCommand>
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	ff 90       	pop	r15
     424:	ef 90       	pop	r14
     426:	08 95       	ret

00000428 <HLCD_voidSelectLine>:
     428:	81 30       	cpi	r24, 0x01	; 1
     42a:	19 f0       	breq	.+6      	; 0x432 <HLCD_voidSelectLine+0xa>
     42c:	82 30       	cpi	r24, 0x02	; 2
     42e:	29 f0       	breq	.+10     	; 0x43a <HLCD_voidSelectLine+0x12>
     430:	08 95       	ret
     432:	80 e8       	ldi	r24, 0x80	; 128
     434:	0e 94 41 01 	call	0x282	; 0x282 <HLCD_voidWriteCommand>
     438:	08 95       	ret
     43a:	80 ec       	ldi	r24, 0xC0	; 192
     43c:	0e 94 41 01 	call	0x282	; 0x282 <HLCD_voidWriteCommand>
     440:	08 95       	ret

00000442 <HLCD_voidDisplayChar>:
     442:	8a 30       	cpi	r24, 0x0A	; 10
     444:	20 f4       	brcc	.+8      	; 0x44e <HLCD_voidDisplayChar+0xc>
     446:	80 5d       	subi	r24, 0xD0	; 208
     448:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <HLCD_voidWriteData>
     44c:	08 95       	ret
     44e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <HLCD_voidWriteData>
     452:	08 95       	ret

00000454 <HLCD_voidDisplayString>:
     454:	bf 92       	push	r11
     456:	cf 92       	push	r12
     458:	df 92       	push	r13
     45a:	ef 92       	push	r14
     45c:	ff 92       	push	r15
     45e:	0f 93       	push	r16
     460:	1f 93       	push	r17
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	ec 01       	movw	r28, r24
     468:	61 11       	cpse	r22, r1
     46a:	48 c0       	rjmp	.+144    	; 0x4fc <HLCD_voidDisplayString+0xa8>
     46c:	c8 80       	ld	r12, Y
     46e:	d9 80       	ldd	r13, Y+1	; 0x01
     470:	ea 80       	ldd	r14, Y+2	; 0x02
     472:	fb 80       	ldd	r15, Y+3	; 0x03
     474:	c1 14       	cp	r12, r1
     476:	d1 04       	cpc	r13, r1
     478:	e1 04       	cpc	r14, r1
     47a:	f1 04       	cpc	r15, r1
     47c:	21 f4       	brne	.+8      	; 0x486 <HLCD_voidDisplayString+0x32>
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	0e 94 21 02 	call	0x442	; 0x442 <HLCD_voidDisplayChar>
     484:	46 c0       	rjmp	.+140    	; 0x512 <HLCD_voidDisplayString+0xbe>
     486:	d0 e0       	ldi	r29, 0x00	; 0
     488:	19 e0       	ldi	r17, 0x09	; 9
     48a:	c1 2f       	mov	r28, r17
     48c:	cd 1b       	sub	r28, r29
     48e:	6c 2f       	mov	r22, r28
     490:	8a e0       	ldi	r24, 0x0A	; 10
     492:	0e 94 03 03 	call	0x606	; 0x606 <LMATH_u32GetExponential>
     496:	9b 01       	movw	r18, r22
     498:	ac 01       	movw	r20, r24
     49a:	c7 01       	movw	r24, r14
     49c:	b6 01       	movw	r22, r12
     49e:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__udivmodsi4>
     4a2:	23 2b       	or	r18, r19
     4a4:	24 2b       	or	r18, r20
     4a6:	25 2b       	or	r18, r21
     4a8:	29 f1       	breq	.+74     	; 0x4f4 <HLCD_voidDisplayString+0xa0>
     4aa:	da 30       	cpi	r29, 0x0A	; 10
     4ac:	90 f5       	brcc	.+100    	; 0x512 <HLCD_voidDisplayString+0xbe>
     4ae:	6c 2f       	mov	r22, r28
     4b0:	8a e0       	ldi	r24, 0x0A	; 10
     4b2:	0e 94 03 03 	call	0x606	; 0x606 <LMATH_u32GetExponential>
     4b6:	9b 01       	movw	r18, r22
     4b8:	ac 01       	movw	r20, r24
     4ba:	c7 01       	movw	r24, r14
     4bc:	b6 01       	movw	r22, r12
     4be:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__udivmodsi4>
     4c2:	b6 2e       	mov	r11, r22
     4c4:	07 2f       	mov	r16, r23
     4c6:	18 2f       	mov	r17, r24
     4c8:	d9 2f       	mov	r29, r25
     4ca:	6c 2f       	mov	r22, r28
     4cc:	8a e0       	ldi	r24, 0x0A	; 10
     4ce:	0e 94 03 03 	call	0x606	; 0x606 <LMATH_u32GetExponential>
     4d2:	9b 01       	movw	r18, r22
     4d4:	ac 01       	movw	r20, r24
     4d6:	c7 01       	movw	r24, r14
     4d8:	b6 01       	movw	r22, r12
     4da:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__udivmodsi4>
     4de:	82 2f       	mov	r24, r18
     4e0:	0e 94 21 02 	call	0x442	; 0x442 <HLCD_voidDisplayChar>
     4e4:	c1 50       	subi	r28, 0x01	; 1
     4e6:	cb 2c       	mov	r12, r11
     4e8:	d0 2e       	mov	r13, r16
     4ea:	e1 2e       	mov	r14, r17
     4ec:	fd 2e       	mov	r15, r29
     4ee:	cf 3f       	cpi	r28, 0xFF	; 255
     4f0:	f1 f6       	brne	.-68     	; 0x4ae <HLCD_voidDisplayString+0x5a>
     4f2:	0f c0       	rjmp	.+30     	; 0x512 <HLCD_voidDisplayString+0xbe>
     4f4:	df 5f       	subi	r29, 0xFF	; 255
     4f6:	da 30       	cpi	r29, 0x0A	; 10
     4f8:	41 f6       	brne	.-112    	; 0x48a <HLCD_voidDisplayString+0x36>
     4fa:	0b c0       	rjmp	.+22     	; 0x512 <HLCD_voidDisplayString+0xbe>
     4fc:	61 30       	cpi	r22, 0x01	; 1
     4fe:	49 f4       	brne	.+18     	; 0x512 <HLCD_voidDisplayString+0xbe>
     500:	88 81       	ld	r24, Y
     502:	88 23       	and	r24, r24
     504:	31 f0       	breq	.+12     	; 0x512 <HLCD_voidDisplayString+0xbe>
     506:	21 96       	adiw	r28, 0x01	; 1
     508:	0e 94 21 02 	call	0x442	; 0x442 <HLCD_voidDisplayChar>
     50c:	89 91       	ld	r24, Y+
     50e:	81 11       	cpse	r24, r1
     510:	fb cf       	rjmp	.-10     	; 0x508 <HLCD_voidDisplayString+0xb4>
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	1f 91       	pop	r17
     518:	0f 91       	pop	r16
     51a:	ff 90       	pop	r15
     51c:	ef 90       	pop	r14
     51e:	df 90       	pop	r13
     520:	cf 90       	pop	r12
     522:	bf 90       	pop	r11
     524:	08 95       	ret

00000526 <HLCD_voidCursorDisplayOnOff>:
  * return      : void  
  */
  void HLCD_voidCursorDisplayOnOff(u8 Copy_u8Status)
  {
	  /*Set Display status value (on or off)*/
	  L_UTILS_SET_BIT_VALUE(DisplayAndCursorCommand,HLCD_CURSOR_BIT,Copy_u8Status);
     526:	81 11       	cpse	r24, r1
     528:	06 c0       	rjmp	.+12     	; 0x536 <HLCD_voidCursorDisplayOnOff+0x10>
     52a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <DisplayAndCursorCommand>
     52e:	8d 7f       	andi	r24, 0xFD	; 253
     530:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <DisplayAndCursorCommand>
     534:	05 c0       	rjmp	.+10     	; 0x540 <HLCD_voidCursorDisplayOnOff+0x1a>
     536:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <DisplayAndCursorCommand>
     53a:	82 60       	ori	r24, 0x02	; 2
     53c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <DisplayAndCursorCommand>
	  /*Send command*/
	  HLCD_voidWriteCommand(DisplayAndCursorCommand);
     540:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <DisplayAndCursorCommand>
     544:	0e 94 41 01 	call	0x282	; 0x282 <HLCD_voidWriteCommand>
     548:	08 95       	ret

0000054a <HLCD_voidCursorBlinkOnOff>:
  * return      : void  
  */
  void HLCD_voidCursorBlinkOnOff(u8 Copy_u8Status) 
  {
	  /*Set Cursor status value (on or off)*/
	  L_UTILS_SET_BIT_VALUE(DisplayAndCursorCommand,HLCD_BLINK_BIT,Copy_u8Status);
     54a:	81 11       	cpse	r24, r1
     54c:	06 c0       	rjmp	.+12     	; 0x55a <HLCD_voidCursorBlinkOnOff+0x10>
     54e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <DisplayAndCursorCommand>
     552:	8e 7f       	andi	r24, 0xFE	; 254
     554:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <DisplayAndCursorCommand>
     558:	05 c0       	rjmp	.+10     	; 0x564 <HLCD_voidCursorBlinkOnOff+0x1a>
     55a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <DisplayAndCursorCommand>
     55e:	81 60       	ori	r24, 0x01	; 1
     560:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <DisplayAndCursorCommand>
	  /*Send command*/
	  HLCD_voidWriteCommand(DisplayAndCursorCommand);
     564:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <DisplayAndCursorCommand>
     568:	0e 94 41 01 	call	0x282	; 0x282 <HLCD_voidWriteCommand>
     56c:	08 95       	ret

0000056e <HLED_u8InitOneLed>:
u8 HLED_u8InitLedString(u8 Copy_u8Reg)
{
	/*initialize desired port  as output and return error value*/
	return MDIO_u8SetDirectionReg(Copy_u8Reg,MDIO_OUTPUT);

}/*end of HLED_u8InitLedString*/
     56e:	41 e0       	ldi	r20, 0x01	; 1
     570:	0e 94 43 06 	call	0xc86	; 0xc86 <MDIO_u8SetDirectionBit>
     574:	08 95       	ret

00000576 <HLED_u8LedOnOff>:
 *			     (0) means no error,(1) means Undefined PORT Argument, (2) means Bit number out of range, (3) means Bit value out of range
 */
u8 HLED_u8LedOnOff(u8 Copy_u8Reg,u8 Copy_u8Bit,u8 Copy_u8State)
{
	/*write led value on desired bit and return error value*/
	return MDIO_u8WriteBit(Copy_u8Reg,Copy_u8Bit,Copy_u8State);
     576:	0e 94 cb 06 	call	0xd96	; 0xd96 <MDIO_u8WriteBit>

}/*end of HLED_u8LedOnOff*/
     57a:	08 95       	ret

0000057c <LDelay_voidDelay_ms>:
 * Description : create time delay in milliseconds
 * Arguments   : time in milliseconds                   
 * return      : void  
 */
void LDelay_voidDelay_ms(u32 Copy_u32Time_ms)
{
     57c:	8f 92       	push	r8
     57e:	9f 92       	push	r9
     580:	af 92       	push	r10
     582:	bf 92       	push	r11
     584:	cf 92       	push	r12
     586:	df 92       	push	r13
     588:	ef 92       	push	r14
     58a:	ff 92       	push	r15
     58c:	0f 93       	push	r16
     58e:	9b 01       	movw	r18, r22
     590:	ac 01       	movw	r20, r24
	/*calculate net time(minus time spent in calculation processing)*/
	Copy_u32Time_ms = (Copy_u32Time_ms * 100000)-(LDELAY_CalculationTime + LDELAY_ContextSwitch);
     592:	60 ea       	ldi	r22, 0xA0	; 160
     594:	76 e8       	ldi	r23, 0x86	; 134
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__mulsi3>
	/*calculate number of iterations in busy loop*/
	u32 Local_u32NoLoops = Copy_u32Time_ms/LDELAY_LoopTime;
     59e:	66 56       	subi	r22, 0x66	; 102
     5a0:	79 40       	sbci	r23, 0x09	; 9
     5a2:	81 09       	sbc	r24, r1
     5a4:	91 09       	sbc	r25, r1
     5a6:	29 eb       	ldi	r18, 0xB9	; 185
     5a8:	35 e7       	ldi	r19, 0x75	; 117
     5aa:	49 e7       	ldi	r20, 0x79	; 121
     5ac:	57 e0       	ldi	r21, 0x07	; 7
     5ae:	0e 94 99 09 	call	0x1332	; 0x1332 <__umulsidi3>
     5b2:	00 e2       	ldi	r16, 0x20	; 32
     5b4:	0e 94 c6 09 	call	0x138c	; 0x138c <__lshrdi3>
     5b8:	82 2e       	mov	r8, r18
     5ba:	93 2e       	mov	r9, r19
     5bc:	a4 2e       	mov	r10, r20
     5be:	b5 2e       	mov	r11, r21
     5c0:	b6 94       	lsr	r11
     5c2:	a7 94       	ror	r10
     5c4:	97 94       	ror	r9
     5c6:	87 94       	ror	r8
     5c8:	b6 94       	lsr	r11
     5ca:	a7 94       	ror	r10
     5cc:	97 94       	ror	r9
     5ce:	87 94       	ror	r8
	
	/*crate busy loop*/
	for(u32 i=0;i<Local_u32NoLoops;i++)
     5d0:	81 14       	cp	r8, r1
     5d2:	91 04       	cpc	r9, r1
     5d4:	a1 04       	cpc	r10, r1
     5d6:	b1 04       	cpc	r11, r1
     5d8:	61 f0       	breq	.+24     	; 0x5f2 <LDelay_voidDelay_ms+0x76>
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	dc 01       	movw	r26, r24
	{
		/*no operation assembly line*/
		asm("NOP");
     5e0:	00 00       	nop
	Copy_u32Time_ms = (Copy_u32Time_ms * 100000)-(LDELAY_CalculationTime + LDELAY_ContextSwitch);
	/*calculate number of iterations in busy loop*/
	u32 Local_u32NoLoops = Copy_u32Time_ms/LDELAY_LoopTime;
	
	/*crate busy loop*/
	for(u32 i=0;i<Local_u32NoLoops;i++)
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	a1 1d       	adc	r26, r1
     5e6:	b1 1d       	adc	r27, r1
     5e8:	88 16       	cp	r8, r24
     5ea:	99 06       	cpc	r9, r25
     5ec:	aa 06       	cpc	r10, r26
     5ee:	bb 06       	cpc	r11, r27
     5f0:	b9 f7       	brne	.-18     	; 0x5e0 <LDelay_voidDelay_ms+0x64>
	{
		/*no operation assembly line*/
		asm("NOP");
	}/*end of busy loop*/
	
}/*end of LDelay_voidDelay_ms()*/
     5f2:	0f 91       	pop	r16
     5f4:	ff 90       	pop	r15
     5f6:	ef 90       	pop	r14
     5f8:	df 90       	pop	r13
     5fa:	cf 90       	pop	r12
     5fc:	bf 90       	pop	r11
     5fe:	af 90       	pop	r10
     600:	9f 90       	pop	r9
     602:	8f 90       	pop	r8
     604:	08 95       	ret

00000606 <LMATH_u32GetExponential>:
 * Description : module that calculate exponential value for a given base and exponent numbers   
 * Argument    : exponent, base
 * return      : exponential value
 */
u32 LMATH_u32GetExponential(u8 Copy_u8LBase, u8 Copy_u8LExponent)
{
     606:	cf 92       	push	r12
     608:	df 92       	push	r13
     60a:	ef 92       	push	r14
     60c:	ff 92       	push	r15
     60e:	c8 2e       	mov	r12, r24
     610:	f6 2f       	mov	r31, r22
    u32 Local_u32Result = 1;
    for(u8 i =0; i<Copy_u8LExponent;i++)
     612:	66 23       	and	r22, r22
     614:	91 f0       	breq	.+36     	; 0x63a <LMATH_u32GetExponential+0x34>
     616:	e0 e0       	ldi	r30, 0x00	; 0
     618:	61 e0       	ldi	r22, 0x01	; 1
     61a:	70 e0       	ldi	r23, 0x00	; 0
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	90 e0       	ldi	r25, 0x00	; 0
    {
        Local_u32Result *= Copy_u8LBase;
     620:	d1 2c       	mov	r13, r1
     622:	e1 2c       	mov	r14, r1
     624:	f1 2c       	mov	r15, r1
     626:	9b 01       	movw	r18, r22
     628:	ac 01       	movw	r20, r24
     62a:	c7 01       	movw	r24, r14
     62c:	b6 01       	movw	r22, r12
     62e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__mulsi3>
 * return      : exponential value
 */
u32 LMATH_u32GetExponential(u8 Copy_u8LBase, u8 Copy_u8LExponent)
{
    u32 Local_u32Result = 1;
    for(u8 i =0; i<Copy_u8LExponent;i++)
     632:	ef 5f       	subi	r30, 0xFF	; 255
     634:	fe 13       	cpse	r31, r30
     636:	f7 cf       	rjmp	.-18     	; 0x626 <LMATH_u32GetExponential+0x20>
     638:	04 c0       	rjmp	.+8      	; 0x642 <LMATH_u32GetExponential+0x3c>
 * Argument    : exponent, base
 * return      : exponential value
 */
u32 LMATH_u32GetExponential(u8 Copy_u8LBase, u8 Copy_u8LExponent)
{
    u32 Local_u32Result = 1;
     63a:	61 e0       	ldi	r22, 0x01	; 1
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	90 e0       	ldi	r25, 0x00	; 0
    for(u8 i =0; i<Copy_u8LExponent;i++)
    {
        Local_u32Result *= Copy_u8LBase;
    }
    return Local_u32Result;
}
     642:	ff 90       	pop	r15
     644:	ef 90       	pop	r14
     646:	df 90       	pop	r13
     648:	cf 90       	pop	r12
     64a:	08 95       	ret

0000064c <APP_voidUpdateSensorReadings>:


void APP_voidUpdateSensorReadings(void)
{
	/*Check pressed key*/
	if (APP_u8PressedKey == 'A')
     64c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <APP_u8PressedKey>
     650:	81 34       	cpi	r24, 0x41	; 65
     652:	39 f4       	brne	.+14     	; 0x662 <APP_voidUpdateSensorReadings+0x16>
	{
		/*Toggle Weigh sensor state*/
		APP_u8WeightSensorState ^= 1;
     654:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <APP_u8WeightSensorState>
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	89 27       	eor	r24, r25
     65c:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <APP_u8WeightSensorState>
     660:	08 95       	ret
		
	}
	else if (APP_u8PressedKey == 'B')
     662:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <APP_u8PressedKey>
     666:	82 34       	cpi	r24, 0x42	; 66
     668:	31 f4       	brne	.+12     	; 0x676 <APP_voidUpdateSensorReadings+0x2a>
	{
		/*Toggle Door sensor state*/
		APP_u8DoorSensorState ^= 1;
     66a:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <APP_u8DoorSensorState>
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	89 27       	eor	r24, r25
     672:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <APP_u8DoorSensorState>
     676:	08 95       	ret

00000678 <APP_voidGetPressedKey>:
}/*end of APP_voidCreateSystemTasks()*/

void APP_voidGetPressedKey(void)
{
	/*get pressed key value*/
	u8 Local_u8Temp = HKPD_u8GetPressedKey();
     678:	0e 94 7a 00 	call	0xf4	; 0xf4 <HKPD_u8GetPressedKey>
	
	/*any key pressed check*/
	if (Local_u8Temp != '?')
     67c:	8f 33       	cpi	r24, 0x3F	; 63
     67e:	19 f0       	breq	.+6      	; 0x686 <APP_voidGetPressedKey+0xe>
	{
		/*return pressed key value*/
		APP_u8PressedKey = Local_u8Temp;
     680:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <APP_u8PressedKey>
     684:	08 95       	ret
	}
	else /*no key pressed*/
 	{
		/*return dummy value*/
		APP_u8PressedKey = 'K';
     686:	8b e4       	ldi	r24, 0x4B	; 75
     688:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <APP_u8PressedKey>
     68c:	08 95       	ret

0000068e <APP_voidDisplayLCD>:

void APP_voidDisplayLCD(void)
{
	/*Display mode check*/
	/*Display set time mode*/
	if ( APP_u8AppMode == APP_SET_TIME )
     68e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <APP_u8AppMode>
     692:	81 11       	cpse	r24, r1
     694:	25 c0       	rjmp	.+74     	; 0x6e0 <APP_voidDisplayLCD+0x52>
	{
		/*Display set Heating Time message in line1*/
		HLCD_voidSelectLine(HLCD_LINE1);
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	0e 94 14 02 	call	0x428	; 0x428 <HLCD_voidSelectLine>
		HLCD_voidDisplayString(APP_u8PtrClearDisplayedString,HLCD_STRING);
     69c:	61 e0       	ldi	r22, 0x01	; 1
     69e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <APP_u8PtrClearDisplayedString>
     6a2:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <APP_u8PtrClearDisplayedString+0x1>
     6a6:	0e 94 2a 02 	call	0x454	; 0x454 <HLCD_voidDisplayString>
		HLCD_voidSelectLine(HLCD_LINE1);
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	0e 94 14 02 	call	0x428	; 0x428 <HLCD_voidSelectLine>
		HLCD_voidDisplayString("Set Heating Time",HLCD_STRING);
     6b0:	61 e0       	ldi	r22, 0x01	; 1
     6b2:	8f eb       	ldi	r24, 0xBF	; 191
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	0e 94 2a 02 	call	0x454	; 0x454 <HLCD_voidDisplayString>
		
		/*Display pressed keys in line 2*/
		HLCD_voidSelectLine(HLCD_LINE2);
     6ba:	82 e0       	ldi	r24, 0x02	; 2
     6bc:	0e 94 14 02 	call	0x428	; 0x428 <HLCD_voidSelectLine>
		HLCD_voidDisplayString(APP_u8PtrClearDisplayedString,HLCD_STRING);
     6c0:	61 e0       	ldi	r22, 0x01	; 1
     6c2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <APP_u8PtrClearDisplayedString>
     6c6:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <APP_u8PtrClearDisplayedString+0x1>
     6ca:	0e 94 2a 02 	call	0x454	; 0x454 <HLCD_voidDisplayString>
		HLCD_voidSelectLine(HLCD_LINE2);
     6ce:	82 e0       	ldi	r24, 0x02	; 2
     6d0:	0e 94 14 02 	call	0x428	; 0x428 <HLCD_voidSelectLine>
		HLCD_voidDisplayString(&APP_u32SetTime,HLCD_NUMBER);
     6d4:	60 e0       	ldi	r22, 0x00	; 0
     6d6:	86 e2       	ldi	r24, 0x26	; 38
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	0e 94 2a 02 	call	0x454	; 0x454 <HLCD_voidDisplayString>
     6de:	08 95       	ret
		
	}
	/*Display remaining time mode*/
	else if ( APP_u8AppMode == APP_REMAINING_DISPLAY_TIME )
     6e0:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <APP_u8AppMode>
     6e4:	81 30       	cpi	r24, 0x01	; 1
     6e6:	21 f5       	brne	.+72     	; 0x730 <APP_voidDisplayLCD+0xa2>
	{
		/*Display Remaining Time message in line1*/
		HLCD_voidSelectLine(HLCD_LINE1);
     6e8:	0e 94 14 02 	call	0x428	; 0x428 <HLCD_voidSelectLine>
		HLCD_voidDisplayString(APP_u8PtrClearDisplayedString,HLCD_STRING);
     6ec:	61 e0       	ldi	r22, 0x01	; 1
     6ee:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <APP_u8PtrClearDisplayedString>
     6f2:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <APP_u8PtrClearDisplayedString+0x1>
     6f6:	0e 94 2a 02 	call	0x454	; 0x454 <HLCD_voidDisplayString>
		HLCD_voidSelectLine(HLCD_LINE1);
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	0e 94 14 02 	call	0x428	; 0x428 <HLCD_voidSelectLine>
		HLCD_voidDisplayString("Remaining Time",HLCD_STRING);
     700:	61 e0       	ldi	r22, 0x01	; 1
     702:	80 ed       	ldi	r24, 0xD0	; 208
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 2a 02 	call	0x454	; 0x454 <HLCD_voidDisplayString>
		/*Display remaining heating time in line2*/
		HLCD_voidSelectLine(HLCD_LINE2);
     70a:	82 e0       	ldi	r24, 0x02	; 2
     70c:	0e 94 14 02 	call	0x428	; 0x428 <HLCD_voidSelectLine>
		HLCD_voidDisplayString(APP_u8PtrClearDisplayedString,HLCD_STRING);
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <APP_u8PtrClearDisplayedString>
     716:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <APP_u8PtrClearDisplayedString+0x1>
     71a:	0e 94 2a 02 	call	0x454	; 0x454 <HLCD_voidDisplayString>
		HLCD_voidSelectLine(HLCD_LINE2);
     71e:	82 e0       	ldi	r24, 0x02	; 2
     720:	0e 94 14 02 	call	0x428	; 0x428 <HLCD_voidSelectLine>
		HLCD_voidDisplayString(&APP_u32RemainingTime,HLCD_NUMBER);
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	82 e2       	ldi	r24, 0x22	; 34
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	0e 94 2a 02 	call	0x454	; 0x454 <HLCD_voidDisplayString>
     72e:	08 95       	ret
				
	}
	/*Display close door message*/
	else if ( APP_u8AppMode == APP_CLOSE_DOOR )
     730:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <APP_u8AppMode>
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	e9 f4       	brne	.+58     	; 0x772 <APP_voidDisplayLCD+0xe4>
	{
		/*Display Close Door message in line1*/
		HLCD_voidSelectLine(HLCD_LINE1);
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	0e 94 14 02 	call	0x428	; 0x428 <HLCD_voidSelectLine>
		HLCD_voidDisplayString(APP_u8PtrClearDisplayedString,HLCD_STRING);
     73e:	61 e0       	ldi	r22, 0x01	; 1
     740:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <APP_u8PtrClearDisplayedString>
     744:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <APP_u8PtrClearDisplayedString+0x1>
     748:	0e 94 2a 02 	call	0x454	; 0x454 <HLCD_voidDisplayString>
		HLCD_voidSelectLine(HLCD_LINE2);
     74c:	82 e0       	ldi	r24, 0x02	; 2
     74e:	0e 94 14 02 	call	0x428	; 0x428 <HLCD_voidSelectLine>
		HLCD_voidDisplayString(APP_u8PtrClearDisplayedString,HLCD_STRING);
     752:	61 e0       	ldi	r22, 0x01	; 1
     754:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <APP_u8PtrClearDisplayedString>
     758:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <APP_u8PtrClearDisplayedString+0x1>
     75c:	0e 94 2a 02 	call	0x454	; 0x454 <HLCD_voidDisplayString>
		HLCD_voidSelectLine(HLCD_LINE1);
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	0e 94 14 02 	call	0x428	; 0x428 <HLCD_voidSelectLine>
		HLCD_voidDisplayString("Close Door",HLCD_STRING);
     766:	61 e0       	ldi	r22, 0x01	; 1
     768:	8f ed       	ldi	r24, 0xDF	; 223
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 2a 02 	call	0x454	; 0x454 <HLCD_voidDisplayString>
     770:	08 95       	ret
		
	}
	/*Display put food message*/
	else if ( APP_u8AppMode == APP_PUT_FOOD )
     772:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <APP_u8AppMode>
     776:	83 30       	cpi	r24, 0x03	; 3
     778:	e9 f4       	brne	.+58     	; 0x7b4 <APP_voidDisplayLCD+0x126>
	{
		/*Display Put food message message in line1*/
		HLCD_voidSelectLine(HLCD_LINE1);
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	0e 94 14 02 	call	0x428	; 0x428 <HLCD_voidSelectLine>
		HLCD_voidDisplayString(APP_u8PtrClearDisplayedString,HLCD_STRING);
     780:	61 e0       	ldi	r22, 0x01	; 1
     782:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <APP_u8PtrClearDisplayedString>
     786:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <APP_u8PtrClearDisplayedString+0x1>
     78a:	0e 94 2a 02 	call	0x454	; 0x454 <HLCD_voidDisplayString>
		HLCD_voidSelectLine(HLCD_LINE2);
     78e:	82 e0       	ldi	r24, 0x02	; 2
     790:	0e 94 14 02 	call	0x428	; 0x428 <HLCD_voidSelectLine>
		HLCD_voidDisplayString(APP_u8PtrClearDisplayedString,HLCD_STRING);
     794:	61 e0       	ldi	r22, 0x01	; 1
     796:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <APP_u8PtrClearDisplayedString>
     79a:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <APP_u8PtrClearDisplayedString+0x1>
     79e:	0e 94 2a 02 	call	0x454	; 0x454 <HLCD_voidDisplayString>
		HLCD_voidSelectLine(HLCD_LINE1);
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	0e 94 14 02 	call	0x428	; 0x428 <HLCD_voidSelectLine>
		HLCD_voidDisplayString("Put Food First",HLCD_STRING);
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	8a ee       	ldi	r24, 0xEA	; 234
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0e 94 2a 02 	call	0x454	; 0x454 <HLCD_voidDisplayString>
     7b2:	08 95       	ret
	}
	/*Display put food and close door message*/
	else if ( APP_u8AppMode == APP_CLOSE_DOOR_PUT_FOOD )
     7b4:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <APP_u8AppMode>
     7b8:	84 30       	cpi	r24, 0x04	; 4
     7ba:	e1 f4       	brne	.+56     	; 0x7f4 <APP_voidDisplayLCD+0x166>
	{
		/*Display CloseDoorPutFood message in line1*/
		HLCD_voidSelectLine(HLCD_LINE1);
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	0e 94 14 02 	call	0x428	; 0x428 <HLCD_voidSelectLine>
		HLCD_voidDisplayString(APP_u8PtrClearDisplayedString,HLCD_STRING);
     7c2:	61 e0       	ldi	r22, 0x01	; 1
     7c4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <APP_u8PtrClearDisplayedString>
     7c8:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <APP_u8PtrClearDisplayedString+0x1>
     7cc:	0e 94 2a 02 	call	0x454	; 0x454 <HLCD_voidDisplayString>
		HLCD_voidSelectLine(HLCD_LINE2);
     7d0:	82 e0       	ldi	r24, 0x02	; 2
     7d2:	0e 94 14 02 	call	0x428	; 0x428 <HLCD_voidSelectLine>
		HLCD_voidDisplayString(APP_u8PtrClearDisplayedString,HLCD_STRING);
     7d6:	61 e0       	ldi	r22, 0x01	; 1
     7d8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <APP_u8PtrClearDisplayedString>
     7dc:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <APP_u8PtrClearDisplayedString+0x1>
     7e0:	0e 94 2a 02 	call	0x454	; 0x454 <HLCD_voidDisplayString>
		HLCD_voidSelectLine(HLCD_LINE1);
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	0e 94 14 02 	call	0x428	; 0x428 <HLCD_voidSelectLine>
		HLCD_voidDisplayString("CloseDoorPutFood",HLCD_STRING);
     7ea:	61 e0       	ldi	r22, 0x01	; 1
     7ec:	89 ef       	ldi	r24, 0xF9	; 249
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0e 94 2a 02 	call	0x454	; 0x454 <HLCD_voidDisplayString>
     7f4:	08 95       	ret

000007f6 <APP_voidUpdateCurrentMode>:
	}/*end of pressed key Check*/

}/*end of APP_voidUpdateSensorReadings()*/

void APP_voidUpdateCurrentMode(void)
{
     7f6:	cf 92       	push	r12
     7f8:	df 92       	push	r13
     7fa:	ef 92       	push	r14
     7fc:	ff 92       	push	r15
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
	/*input time array*/
	static u8 APP_u8SetTimeArr[4]		 = {0};
	
	
	/*Increment time counter each time to update mode*/
	Local_u8TimeCount++;
     804:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <Local_u8TimeCount.1727>
     808:	8f 5f       	subi	r24, 0xFF	; 255
     80a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <Local_u8TimeCount.1727>
	
	/*current mode check*/
	if (APP_u8AppMode == APP_REMAINING_DISPLAY_TIME)
     80e:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <APP_u8AppMode>
     812:	91 30       	cpi	r25, 0x01	; 1
     814:	09 f0       	breq	.+2      	; 0x818 <APP_voidUpdateCurrentMode+0x22>
     816:	54 c0       	rjmp	.+168    	; 0x8c0 <__stack+0x61>
	{
		/*current mode is display remaining time*/
		/*Pressed key check*/
		if (APP_u8PressedKey == 'B')
     818:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <APP_u8PressedKey>
     81c:	92 34       	cpi	r25, 0x42	; 66
     81e:	b1 f4       	brne	.+44     	; 0x84c <APP_voidUpdateCurrentMode+0x56>
		{
			/*if Door was opened during heating*/
			/*stop heating*/
			APP_u8OutputState = APP_STOP_HEATING;
     820:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <APP_u8OutputState>
			/*Change mode to close door mode*/
			APP_u8AppMode	  = APP_CLOSE_DOOR;
     824:	92 e0       	ldi	r25, 0x02	; 2
     826:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <APP_u8AppMode>
			/*Save remaining time*/
			APP_u32SetTime	  = APP_u32RemainingTime;
     82a:	40 91 22 01 	lds	r20, 0x0122	; 0x800122 <APP_u32RemainingTime>
     82e:	50 91 23 01 	lds	r21, 0x0123	; 0x800123 <APP_u32RemainingTime+0x1>
     832:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <APP_u32RemainingTime+0x2>
     836:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <APP_u32RemainingTime+0x3>
     83a:	40 93 26 01 	sts	0x0126, r20	; 0x800126 <APP_u32SetTime>
     83e:	50 93 27 01 	sts	0x0127, r21	; 0x800127 <APP_u32SetTime+0x1>
     842:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <APP_u32SetTime+0x2>
     846:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <APP_u32SetTime+0x3>
     84a:	21 c0       	rjmp	.+66     	; 0x88e <__stack+0x2f>
		}
		else if ( (APP_u8PressedKey == 'C') || (APP_u32RemainingTime == 0) )
     84c:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <APP_u8PressedKey>
     850:	93 34       	cpi	r25, 0x43	; 67
     852:	61 f0       	breq	.+24     	; 0x86c <__stack+0xd>
     854:	40 91 22 01 	lds	r20, 0x0122	; 0x800122 <APP_u32RemainingTime>
     858:	50 91 23 01 	lds	r21, 0x0123	; 0x800123 <APP_u32RemainingTime+0x1>
     85c:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <APP_u32RemainingTime+0x2>
     860:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <APP_u32RemainingTime+0x3>
     864:	45 2b       	or	r20, r21
     866:	46 2b       	or	r20, r22
     868:	47 2b       	or	r20, r23
     86a:	89 f4       	brne	.+34     	; 0x88e <__stack+0x2f>
		{
			/*reset set time */
			APP_u32SetTime			   = 0;
     86c:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <APP_u32SetTime>
     870:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <APP_u32SetTime+0x1>
     874:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <APP_u32SetTime+0x2>
     878:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <APP_u32SetTime+0x3>
			/*reset timer counter*/
			Local_u8TimeCount		   = 0;
     87c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <Local_u8TimeCount.1727>
			/*reset pressed key counter*/
			Local_u8InputNumberCounter = 0;
     880:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <Local_u8InputNumberCounter.1728>
			
			/*stop heating*/
			APP_u8OutputState		   = APP_STOP_HEATING;
     884:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <APP_u8OutputState>
			/*Change mode to Set time mode*/
			APP_u8AppMode			   = APP_SET_TIME;
     888:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <APP_u8AppMode>
     88c:	0f c1       	rjmp	.+542    	; 0xaac <__stack+0x24d>
				
		}/*end of Pressed key check*/
		
		/*check time passed*/
		if (Local_u8TimeCount == 5) /*if 1 seconds passed*/
     88e:	85 30       	cpi	r24, 0x05	; 5
     890:	09 f0       	breq	.+2      	; 0x894 <__stack+0x35>
     892:	0c c1       	rjmp	.+536    	; 0xaac <__stack+0x24d>
		{
			/*zero time counter to count 1 second again*/
			Local_u8TimeCount  = 0;
     894:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <Local_u8TimeCount.1727>
			/*Decrement remaining time by 1*/
			APP_u32RemainingTime--;
     898:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <APP_u32RemainingTime>
     89c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <APP_u32RemainingTime+0x1>
     8a0:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <APP_u32RemainingTime+0x2>
     8a4:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <APP_u32RemainingTime+0x3>
     8a8:	01 97       	sbiw	r24, 0x01	; 1
     8aa:	a1 09       	sbc	r26, r1
     8ac:	b1 09       	sbc	r27, r1
     8ae:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <APP_u32RemainingTime>
     8b2:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <APP_u32RemainingTime+0x1>
     8b6:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <APP_u32RemainingTime+0x2>
     8ba:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <APP_u32RemainingTime+0x3>
     8be:	f6 c0       	rjmp	.+492    	; 0xaac <__stack+0x24d>
		}/*end of time passed check*/
	}
	else /*all other modes*/
	{
		/*Button pressed check*/
		if ( (APP_u8PressedKey >= 0) && (APP_u8PressedKey < 10) )
     8c0:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <APP_u8PressedKey>
     8c4:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <APP_u8PressedKey>
     8c8:	8a 30       	cpi	r24, 0x0A	; 10
     8ca:	08 f0       	brcs	.+2      	; 0x8ce <__stack+0x6f>
     8cc:	4b c0       	rjmp	.+150    	; 0x964 <__stack+0x105>
		{
			/*reset time count*/
			Local_u8TimeCount = 0;
     8ce:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <Local_u8TimeCount.1727>
			
			/*number was pressed*/
			APP_u8AppMode	  = APP_SET_TIME;
     8d2:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <APP_u8AppMode>
			/*zero time counter start time wait from beginning*/
			
			/*accept 4 digit number*/		
			if (Local_u8InputNumberCounter < 4)
     8d6:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <Local_u8InputNumberCounter.1728>
     8da:	64 30       	cpi	r22, 0x04	; 4
     8dc:	e8 f5       	brcc	.+122    	; 0x958 <__stack+0xf9>
			{
				/*save pressed key in set time array*/
				APP_u8SetTimeArr[Local_u8InputNumberCounter] = APP_u8PressedKey;
     8de:	e6 2f       	mov	r30, r22
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <APP_u8PressedKey>
     8e6:	e4 5e       	subi	r30, 0xE4	; 228
     8e8:	fe 4f       	sbci	r31, 0xFE	; 254
     8ea:	80 83       	st	Z, r24
				/*reset set time variable*/
				APP_u32SetTime = 0;
     8ec:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <APP_u32SetTime>
     8f0:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <APP_u32SetTime+0x1>
     8f4:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <APP_u32SetTime+0x2>
     8f8:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <APP_u32SetTime+0x3>
				
				/*loop inputed keys*/
				for (u8 i = 0; i < (Local_u8InputNumberCounter+1) ;i++)
     8fc:	c0 e0       	ldi	r28, 0x00	; 0
     8fe:	d0 e0       	ldi	r29, 0x00	; 0
     900:	10 e0       	ldi	r17, 0x00	; 0
				{
					/*calculate set time value*/
					u32 Local_u32Result = LMATH_u32GetExponential(10,(Local_u8InputNumberCounter-i));
     902:	61 1b       	sub	r22, r17
     904:	8a e0       	ldi	r24, 0x0A	; 10
     906:	0e 94 03 03 	call	0x606	; 0x606 <LMATH_u32GetExponential>
     90a:	9b 01       	movw	r18, r22
     90c:	ac 01       	movw	r20, r24
					APP_u32SetTime = APP_u32SetTime + ( ((u32)APP_u8SetTimeArr[i]) * Local_u32Result ) ;
     90e:	c0 90 26 01 	lds	r12, 0x0126	; 0x800126 <APP_u32SetTime>
     912:	d0 90 27 01 	lds	r13, 0x0127	; 0x800127 <APP_u32SetTime+0x1>
     916:	e0 90 28 01 	lds	r14, 0x0128	; 0x800128 <APP_u32SetTime+0x2>
     91a:	f0 90 29 01 	lds	r15, 0x0129	; 0x800129 <APP_u32SetTime+0x3>
     91e:	c4 5e       	subi	r28, 0xE4	; 228
     920:	de 4f       	sbci	r29, 0xFE	; 254
     922:	a8 81       	ld	r26, Y
     924:	b0 e0       	ldi	r27, 0x00	; 0
     926:	0e 94 8e 09 	call	0x131c	; 0x131c <__muluhisi3>
     92a:	c6 0e       	add	r12, r22
     92c:	d7 1e       	adc	r13, r23
     92e:	e8 1e       	adc	r14, r24
     930:	f9 1e       	adc	r15, r25
     932:	c0 92 26 01 	sts	0x0126, r12	; 0x800126 <APP_u32SetTime>
     936:	d0 92 27 01 	sts	0x0127, r13	; 0x800127 <APP_u32SetTime+0x1>
     93a:	e0 92 28 01 	sts	0x0128, r14	; 0x800128 <APP_u32SetTime+0x2>
     93e:	f0 92 29 01 	sts	0x0129, r15	; 0x800129 <APP_u32SetTime+0x3>
				APP_u8SetTimeArr[Local_u8InputNumberCounter] = APP_u8PressedKey;
				/*reset set time variable*/
				APP_u32SetTime = 0;
				
				/*loop inputed keys*/
				for (u8 i = 0; i < (Local_u8InputNumberCounter+1) ;i++)
     942:	1f 5f       	subi	r17, 0xFF	; 255
     944:	c1 2f       	mov	r28, r17
     946:	d0 e0       	ldi	r29, 0x00	; 0
     948:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <Local_u8InputNumberCounter.1728>
     94c:	86 2f       	mov	r24, r22
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	01 96       	adiw	r24, 0x01	; 1
     952:	c8 17       	cp	r28, r24
     954:	d9 07       	cpc	r29, r25
     956:	ac f2       	brlt	.-86     	; 0x902 <__stack+0xa3>
				}/*end of inputed keys loop*/
				
			}/*end of number of digits entered check*/
			
			/*increment number of key pressed*/
			Local_u8InputNumberCounter++;
     958:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <Local_u8InputNumberCounter.1728>
     95c:	8f 5f       	subi	r24, 0xFF	; 255
     95e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Local_u8InputNumberCounter.1728>
     962:	92 c0       	rjmp	.+292    	; 0xa88 <__stack+0x229>
		
		}
		else if (APP_u8PressedKey == 'C') /*cancel button pressed*/
     964:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <APP_u8PressedKey>
     968:	83 34       	cpi	r24, 0x43	; 67
     96a:	79 f4       	brne	.+30     	; 0x98a <__stack+0x12b>
		{
			/*reset set time */
			APP_u32SetTime			   = 0;
     96c:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <APP_u32SetTime>
     970:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <APP_u32SetTime+0x1>
     974:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <APP_u32SetTime+0x2>
     978:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <APP_u32SetTime+0x3>
			/*reset timer counter*/
			Local_u8TimeCount		   = 0;
     97c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <Local_u8TimeCount.1727>
			/*reset pressed key counter*/
			Local_u8InputNumberCounter = 0;
     980:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <Local_u8InputNumberCounter.1728>
			/*Change mode to set time mode*/
			APP_u8AppMode			   = APP_SET_TIME;
     984:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <APP_u8AppMode>
     988:	91 c0       	rjmp	.+290    	; 0xaac <__stack+0x24d>
		
		}
		else if (APP_u8PressedKey == 'D') /**/
     98a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <APP_u8PressedKey>
     98e:	84 34       	cpi	r24, 0x44	; 68
     990:	09 f0       	breq	.+2      	; 0x994 <__stack+0x135>
     992:	7a c0       	rjmp	.+244    	; 0xa88 <__stack+0x229>
		{
			/*zero time counter start time wait from beginning*/
			Local_u8TimeCount = 0;
     994:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <Local_u8TimeCount.1727>
			
			/*sensors check*/
			/*when time is set, food in microwave, and door is closed start heating*/
			if( (APP_u32SetTime != 0) && (APP_u8WeightSensorState == APP_SENSOR_OFF) && (APP_u8DoorSensorState == APP_SENSOR_OFF) )
     998:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <APP_u32SetTime>
     99c:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <APP_u32SetTime+0x1>
     9a0:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <APP_u32SetTime+0x2>
     9a4:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <APP_u32SetTime+0x3>
     9a8:	89 2b       	or	r24, r25
     9aa:	8a 2b       	or	r24, r26
     9ac:	8b 2b       	or	r24, r27
     9ae:	f1 f0       	breq	.+60     	; 0x9ec <__stack+0x18d>
     9b0:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <APP_u8WeightSensorState>
     9b4:	81 11       	cpse	r24, r1
     9b6:	1a c0       	rjmp	.+52     	; 0x9ec <__stack+0x18d>
     9b8:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <APP_u8DoorSensorState>
     9bc:	81 11       	cpse	r24, r1
     9be:	16 c0       	rjmp	.+44     	; 0x9ec <__stack+0x18d>
			{
				/*set remaining time with set time value*/
				APP_u32RemainingTime = APP_u32SetTime;
     9c0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <APP_u32SetTime>
     9c4:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <APP_u32SetTime+0x1>
     9c8:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <APP_u32SetTime+0x2>
     9cc:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <APP_u32SetTime+0x3>
     9d0:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <APP_u32RemainingTime>
     9d4:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <APP_u32RemainingTime+0x1>
     9d8:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <APP_u32RemainingTime+0x2>
     9dc:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <APP_u32RemainingTime+0x3>
				/*start heating process*/
				APP_u8OutputState = APP_START_HEATING;
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <APP_u8OutputState>
				/*Change mode to display remaining time mode*/
				APP_u8AppMode = APP_REMAINING_DISPLAY_TIME;
     9e6:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <APP_u8AppMode>
     9ea:	60 c0       	rjmp	.+192    	; 0xaac <__stack+0x24d>
			}
			/*door is opened*/
			else if( (APP_u32SetTime != 0) && (APP_u8WeightSensorState == APP_SENSOR_OFF) && (APP_u8DoorSensorState == APP_SENSOR_ON) )
     9ec:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <APP_u32SetTime>
     9f0:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <APP_u32SetTime+0x1>
     9f4:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <APP_u32SetTime+0x2>
     9f8:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <APP_u32SetTime+0x3>
     9fc:	89 2b       	or	r24, r25
     9fe:	8a 2b       	or	r24, r26
     a00:	8b 2b       	or	r24, r27
     a02:	71 f0       	breq	.+28     	; 0xa20 <__stack+0x1c1>
     a04:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <APP_u8WeightSensorState>
     a08:	81 11       	cpse	r24, r1
     a0a:	0a c0       	rjmp	.+20     	; 0xa20 <__stack+0x1c1>
     a0c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <APP_u8DoorSensorState>
     a10:	81 30       	cpi	r24, 0x01	; 1
     a12:	31 f4       	brne	.+12     	; 0xa20 <__stack+0x1c1>
			{
				/*stop heating process*/
				APP_u8OutputState = APP_STOP_HEATING;
     a14:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <APP_u8OutputState>
				/*change mode to close door*/
				APP_u8AppMode	  = APP_CLOSE_DOOR;
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <APP_u8AppMode>
     a1e:	46 c0       	rjmp	.+140    	; 0xaac <__stack+0x24d>
			}
			/*there is no food*/
			else if ( (APP_u32SetTime != 0) && (APP_u8WeightSensorState == APP_SENSOR_ON) && (APP_u8DoorSensorState == APP_SENSOR_OFF) )
     a20:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <APP_u32SetTime>
     a24:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <APP_u32SetTime+0x1>
     a28:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <APP_u32SetTime+0x2>
     a2c:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <APP_u32SetTime+0x3>
     a30:	89 2b       	or	r24, r25
     a32:	8a 2b       	or	r24, r26
     a34:	8b 2b       	or	r24, r27
     a36:	71 f0       	breq	.+28     	; 0xa54 <__stack+0x1f5>
     a38:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <APP_u8WeightSensorState>
     a3c:	81 30       	cpi	r24, 0x01	; 1
     a3e:	51 f4       	brne	.+20     	; 0xa54 <__stack+0x1f5>
     a40:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <APP_u8DoorSensorState>
     a44:	81 11       	cpse	r24, r1
     a46:	06 c0       	rjmp	.+12     	; 0xa54 <__stack+0x1f5>
			{
				/*stop heating process*/
				APP_u8OutputState = APP_STOP_HEATING;
     a48:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <APP_u8OutputState>
				/*change mode to put food*/
				APP_u8AppMode	  = APP_PUT_FOOD;
     a4c:	83 e0       	ldi	r24, 0x03	; 3
     a4e:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <APP_u8AppMode>
     a52:	2c c0       	rjmp	.+88     	; 0xaac <__stack+0x24d>
			}
			/*door is open and there is n food*/
			else if ( (APP_u32SetTime != 0) && (APP_u8WeightSensorState == APP_SENSOR_ON) && (APP_u8DoorSensorState == APP_SENSOR_ON) )
     a54:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <APP_u32SetTime>
     a58:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <APP_u32SetTime+0x1>
     a5c:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <APP_u32SetTime+0x2>
     a60:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <APP_u32SetTime+0x3>
     a64:	89 2b       	or	r24, r25
     a66:	8a 2b       	or	r24, r26
     a68:	8b 2b       	or	r24, r27
     a6a:	01 f1       	breq	.+64     	; 0xaac <__stack+0x24d>
     a6c:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <APP_u8WeightSensorState>
     a70:	81 30       	cpi	r24, 0x01	; 1
     a72:	e1 f4       	brne	.+56     	; 0xaac <__stack+0x24d>
     a74:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <APP_u8DoorSensorState>
     a78:	81 30       	cpi	r24, 0x01	; 1
     a7a:	c1 f4       	brne	.+48     	; 0xaac <__stack+0x24d>
			{
				/*stop heating process*/
				APP_u8OutputState = APP_STOP_HEATING;
     a7c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <APP_u8OutputState>
				/*change mode to close door and put food*/
				APP_u8AppMode	  = APP_CLOSE_DOOR_PUT_FOOD;
     a80:	84 e0       	ldi	r24, 0x04	; 4
     a82:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <APP_u8AppMode>
     a86:	12 c0       	rjmp	.+36     	; 0xaac <__stack+0x24d>
			}/*end of sensors check*/
		
		}
		
		/*check time passed*/
		if (Local_u8TimeCount == 50) /*if 3 seconds passed*/
     a88:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <Local_u8TimeCount.1727>
     a8c:	82 33       	cpi	r24, 0x32	; 50
     a8e:	71 f4       	brne	.+28     	; 0xaac <__stack+0x24d>
		{
			/*set mode to set time*/
			APP_u8AppMode	   = APP_SET_TIME;
     a90:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <APP_u8AppMode>
			/*Make display temp current mode*/
			APP_u32SetTime     = 0;	
     a94:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <APP_u32SetTime>
     a98:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <APP_u32SetTime+0x1>
     a9c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <APP_u32SetTime+0x2>
     aa0:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <APP_u32SetTime+0x3>
			/*reset time counter*/
			Local_u8TimeCount  = 0;
     aa4:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <Local_u8TimeCount.1727>
			/*reset number of pressed key counter*/	
			Local_u8InputNumberCounter = 0;
     aa8:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <Local_u8InputNumberCounter.1728>
			
		}/*end of time passed check*/
		
	}/*end of current mode check*/
	
}/*end of APP_voidUpdateCurrentMode()*/
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	1f 91       	pop	r17
     ab2:	ff 90       	pop	r15
     ab4:	ef 90       	pop	r14
     ab6:	df 90       	pop	r13
     ab8:	cf 90       	pop	r12
     aba:	08 95       	ret

00000abc <APP_voidUpdateOutputState>:


void APP_voidUpdateOutputState(void)
{
	/*Set heater on or off*/
	HLED_u8LedOnOff(MDIO_PORTA,APP_HEATER_PIN,APP_u8OutputState);
     abc:	40 91 2a 01 	lds	r20, 0x012A	; 0x80012a <APP_u8OutputState>
     ac0:	50 e0       	ldi	r21, 0x00	; 0
     ac2:	60 e0       	ldi	r22, 0x00	; 0
     ac4:	70 e0       	ldi	r23, 0x00	; 0
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	0e 94 bb 02 	call	0x576	; 0x576 <HLED_u8LedOnOff>
	/*Set Motor on or off*/
	HLED_u8LedOnOff(MDIO_PORTA,APP_MOTOR_PIN,APP_u8OutputState);
     ace:	40 91 2a 01 	lds	r20, 0x012A	; 0x80012a <APP_u8OutputState>
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	62 e0       	ldi	r22, 0x02	; 2
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 bb 02 	call	0x576	; 0x576 <HLED_u8LedOnOff>
	/*Set Lamp on or off*/
	HLED_u8LedOnOff(MDIO_PORTA,APP_LAMP_PIN,APP_u8OutputState);	
     ae0:	40 91 2a 01 	lds	r20, 0x012A	; 0x80012a <APP_u8OutputState>
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	61 e0       	ldi	r22, 0x01	; 1
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	0e 94 bb 02 	call	0x576	; 0x576 <HLED_u8LedOnOff>
	
	/*Set door sensor indication led on or off*/
	HLED_u8LedOnOff(MDIO_PORTA,APP_DOOR_SENSOR_PIN,APP_u8DoorSensorState);
     af2:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <APP_u8DoorSensorState>
     af6:	50 e0       	ldi	r21, 0x00	; 0
     af8:	63 e0       	ldi	r22, 0x03	; 3
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	0e 94 bb 02 	call	0x576	; 0x576 <HLED_u8LedOnOff>
	/*Set Weight sensor indication led on or off*/
	HLED_u8LedOnOff(MDIO_PORTA,APP_WEIGH_SENSOR_PIN,APP_u8WeightSensorState);
     b04:	40 91 2d 01 	lds	r20, 0x012D	; 0x80012d <APP_u8WeightSensorState>
     b08:	50 e0       	ldi	r21, 0x00	; 0
     b0a:	64 e0       	ldi	r22, 0x04	; 4
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 bb 02 	call	0x576	; 0x576 <HLED_u8LedOnOff>
     b16:	08 95       	ret

00000b18 <APP_voidInitializeSystem>:
}/*end of main()*/

void APP_voidInitializeSystem(void)
{
	/*DIO Initialization*/
	HLED_u8InitOneLed(MDIO_PORTA,APP_HEATER_PIN);
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	0e 94 b7 02 	call	0x56e	; 0x56e <HLED_u8InitOneLed>
	HLED_u8InitOneLed(MDIO_PORTA,APP_LAMP_PIN);
     b24:	61 e0       	ldi	r22, 0x01	; 1
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 b7 02 	call	0x56e	; 0x56e <HLED_u8InitOneLed>
	HLED_u8InitOneLed(MDIO_PORTA,APP_MOTOR_PIN);
     b30:	62 e0       	ldi	r22, 0x02	; 2
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 b7 02 	call	0x56e	; 0x56e <HLED_u8InitOneLed>
	/*sensors initialization*/
	HLED_u8InitOneLed(MDIO_PORTA,APP_DOOR_SENSOR_PIN);
     b3c:	63 e0       	ldi	r22, 0x03	; 3
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 b7 02 	call	0x56e	; 0x56e <HLED_u8InitOneLed>
	HLED_u8InitOneLed(MDIO_PORTA,APP_WEIGH_SENSOR_PIN);
     b48:	64 e0       	ldi	r22, 0x04	; 4
     b4a:	70 e0       	ldi	r23, 0x00	; 0
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	0e 94 b7 02 	call	0x56e	; 0x56e <HLED_u8InitOneLed>
	
	/*Initialize Keypad*/
	HKPD_voidInitializeKeypad();
     b54:	0e 94 49 00 	call	0x92	; 0x92 <HKPD_voidInitializeKeypad>
	
	/*Initialize LCD*/
	HLCD_voidInitializeLCD();
     b58:	0e 94 a2 01 	call	0x344	; 0x344 <HLCD_voidInitializeLCD>
	
	HLCD_voidCursorDisplayOnOff(HLCD_OFF);
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	0e 94 93 02 	call	0x526	; 0x526 <HLCD_voidCursorDisplayOnOff>
	HLCD_voidCursorBlinkOnOff(HLCD_OFF);
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	0e 94 a5 02 	call	0x54a	; 0x54a <HLCD_voidCursorBlinkOnOff>
	HLCD_voidDisplayString("Set Heating Time",HLCD_STRING);
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	8f eb       	ldi	r24, 0xBF	; 191
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 2a 02 	call	0x454	; 0x454 <HLCD_voidDisplayString>
	
	/*OS Initialization*/
	OS_voidInitializeOS();
     b72:	0e 94 cb 08 	call	0x1196	; 0x1196 <OS_voidInitializeOS>
     b76:	08 95       	ret

00000b78 <APP_voidCreateSystemTasks>:

}/*end of APP_voidInitializeSystem()*/

void APP_voidCreateSystemTasks(void)
{
     b78:	8f 92       	push	r8
     b7a:	9f 92       	push	r9
     b7c:	af 92       	push	r10
     b7e:	bf 92       	push	r11
     b80:	cf 92       	push	r12
     b82:	df 92       	push	r13
     b84:	ef 92       	push	r14
     b86:	ff 92       	push	r15
     b88:	0f 93       	push	r16
     b8a:	1f 93       	push	r17
	/*Create Tasks*/
	OS_voidCreateTask(APP_voidGetPressedKey		   , 2  , 0 ,OS_TASK_READY, 1 );
     b8c:	81 2c       	mov	r8, r1
     b8e:	91 2c       	mov	r9, r1
     b90:	54 01       	movw	r10, r8
     b92:	83 94       	inc	r8
     b94:	c1 2c       	mov	r12, r1
     b96:	d1 2c       	mov	r13, r1
     b98:	76 01       	movw	r14, r12
     b9a:	c3 94       	inc	r12
     b9c:	00 e0       	ldi	r16, 0x00	; 0
     b9e:	10 e0       	ldi	r17, 0x00	; 0
     ba0:	98 01       	movw	r18, r16
     ba2:	42 e0       	ldi	r20, 0x02	; 2
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	60 e0       	ldi	r22, 0x00	; 0
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	8c e3       	ldi	r24, 0x3C	; 60
     bac:	93 e0       	ldi	r25, 0x03	; 3
     bae:	0e 94 d5 08 	call	0x11aa	; 0x11aa <OS_voidCreateTask>
	OS_voidCreateTask(APP_voidUpdateSensorReadings , 2  , 1 ,OS_TASK_READY, 1 );
     bb2:	01 e0       	ldi	r16, 0x01	; 1
     bb4:	10 e0       	ldi	r17, 0x00	; 0
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	42 e0       	ldi	r20, 0x02	; 2
     bbc:	50 e0       	ldi	r21, 0x00	; 0
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	86 e2       	ldi	r24, 0x26	; 38
     bc4:	93 e0       	ldi	r25, 0x03	; 3
     bc6:	0e 94 d5 08 	call	0x11aa	; 0x11aa <OS_voidCreateTask>
	OS_voidCreateTask(APP_voidUpdateCurrentMode    , 2  , 2 ,OS_TASK_READY, 2 );
     bca:	81 2c       	mov	r8, r1
     bcc:	91 2c       	mov	r9, r1
     bce:	54 01       	movw	r10, r8
     bd0:	68 94       	set
     bd2:	81 f8       	bld	r8, 1
     bd4:	02 e0       	ldi	r16, 0x02	; 2
     bd6:	10 e0       	ldi	r17, 0x00	; 0
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	42 e0       	ldi	r20, 0x02	; 2
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	8b ef       	ldi	r24, 0xFB	; 251
     be6:	93 e0       	ldi	r25, 0x03	; 3
     be8:	0e 94 d5 08 	call	0x11aa	; 0x11aa <OS_voidCreateTask>
	OS_voidCreateTask(APP_voidDisplayLCD		   , 2  , 3 ,OS_TASK_READY, 3 );
     bec:	0f 2e       	mov	r0, r31
     bee:	f3 e0       	ldi	r31, 0x03	; 3
     bf0:	8f 2e       	mov	r8, r31
     bf2:	91 2c       	mov	r9, r1
     bf4:	a1 2c       	mov	r10, r1
     bf6:	b1 2c       	mov	r11, r1
     bf8:	f0 2d       	mov	r31, r0
     bfa:	03 e0       	ldi	r16, 0x03	; 3
     bfc:	10 e0       	ldi	r17, 0x00	; 0
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	42 e0       	ldi	r20, 0x02	; 2
     c04:	50 e0       	ldi	r21, 0x00	; 0
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	87 e4       	ldi	r24, 0x47	; 71
     c0c:	93 e0       	ldi	r25, 0x03	; 3
     c0e:	0e 94 d5 08 	call	0x11aa	; 0x11aa <OS_voidCreateTask>
	OS_voidCreateTask(APP_voidUpdateOutputState    , 2  , 4 ,OS_TASK_READY, 3 );
     c12:	04 e0       	ldi	r16, 0x04	; 4
     c14:	10 e0       	ldi	r17, 0x00	; 0
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	42 e0       	ldi	r20, 0x02	; 2
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	8e e5       	ldi	r24, 0x5E	; 94
     c24:	95 e0       	ldi	r25, 0x05	; 5
     c26:	0e 94 d5 08 	call	0x11aa	; 0x11aa <OS_voidCreateTask>

}/*end of APP_voidCreateSystemTasks()*/
     c2a:	1f 91       	pop	r17
     c2c:	0f 91       	pop	r16
     c2e:	ff 90       	pop	r15
     c30:	ef 90       	pop	r14
     c32:	df 90       	pop	r13
     c34:	cf 90       	pop	r12
     c36:	bf 90       	pop	r11
     c38:	af 90       	pop	r10
     c3a:	9f 90       	pop	r9
     c3c:	8f 90       	pop	r8
     c3e:	08 95       	ret

00000c40 <main>:
u8  *APP_u8PtrClearDisplayedString  = "                ";

int main(void)
{
    /*System Initialization*/
	APP_voidInitializeSystem();
     c40:	0e 94 8c 05 	call	0xb18	; 0xb18 <APP_voidInitializeSystem>
	/*Create system tasks*/
	APP_voidCreateSystemTasks();
     c44:	0e 94 bc 05 	call	0xb78	; 0xb78 <APP_voidCreateSystemTasks>
	/*Start OS*/
	OS_voidStartOS();
     c48:	0e 94 ce 08 	call	0x119c	; 0x119c <OS_voidStartOS>
     c4c:	ff cf       	rjmp	.-2      	; 0xc4c <main+0xc>

00000c4e <MDIO_u8SetDirectionReg>:
		case MDIO_PORTD : {DIO_PORTD = Local_u8PullUpResStatus; return 0;}  break;
		default         : return 1; /*error Undefined Port*/
			
	}/*end of register switch case*/

}/*end of MDIO_u8ConfigPullupReg()*/
     c4e:	61 30       	cpi	r22, 0x01	; 1
     c50:	09 f4       	brne	.+2      	; 0xc54 <MDIO_u8SetDirectionReg+0x6>
     c52:	6f ef       	ldi	r22, 0xFF	; 255
     c54:	82 30       	cpi	r24, 0x02	; 2
     c56:	61 f0       	breq	.+24     	; 0xc70 <MDIO_u8SetDirectionReg+0x22>
     c58:	18 f4       	brcc	.+6      	; 0xc60 <MDIO_u8SetDirectionReg+0x12>
     c5a:	81 30       	cpi	r24, 0x01	; 1
     c5c:	31 f0       	breq	.+12     	; 0xc6a <MDIO_u8SetDirectionReg+0x1c>
     c5e:	11 c0       	rjmp	.+34     	; 0xc82 <MDIO_u8SetDirectionReg+0x34>
     c60:	83 30       	cpi	r24, 0x03	; 3
     c62:	49 f0       	breq	.+18     	; 0xc76 <MDIO_u8SetDirectionReg+0x28>
     c64:	84 30       	cpi	r24, 0x04	; 4
     c66:	51 f0       	breq	.+20     	; 0xc7c <MDIO_u8SetDirectionReg+0x2e>
     c68:	0c c0       	rjmp	.+24     	; 0xc82 <MDIO_u8SetDirectionReg+0x34>
     c6a:	6a bb       	out	0x1a, r22	; 26
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	08 95       	ret
     c70:	67 bb       	out	0x17, r22	; 23
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	08 95       	ret
     c76:	64 bb       	out	0x14, r22	; 20
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	08 95       	ret
     c7c:	61 bb       	out	0x11, r22	; 17
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	08 95       	ret
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	08 95       	ret

00000c86 <MDIO_u8SetDirectionBit>:
     c86:	68 30       	cpi	r22, 0x08	; 8
     c88:	08 f0       	brcs	.+2      	; 0xc8c <MDIO_u8SetDirectionBit+0x6>
     c8a:	7f c0       	rjmp	.+254    	; 0xd8a <MDIO_u8SetDirectionBit+0x104>
     c8c:	42 30       	cpi	r20, 0x02	; 2
     c8e:	08 f0       	brcs	.+2      	; 0xc92 <MDIO_u8SetDirectionBit+0xc>
     c90:	7e c0       	rjmp	.+252    	; 0xd8e <MDIO_u8SetDirectionBit+0x108>
     c92:	82 30       	cpi	r24, 0x02	; 2
     c94:	31 f1       	breq	.+76     	; 0xce2 <MDIO_u8SetDirectionBit+0x5c>
     c96:	18 f4       	brcc	.+6      	; 0xc9e <MDIO_u8SetDirectionBit+0x18>
     c98:	81 30       	cpi	r24, 0x01	; 1
     c9a:	39 f0       	breq	.+14     	; 0xcaa <MDIO_u8SetDirectionBit+0x24>
     c9c:	7a c0       	rjmp	.+244    	; 0xd92 <MDIO_u8SetDirectionBit+0x10c>
     c9e:	83 30       	cpi	r24, 0x03	; 3
     ca0:	e1 f1       	breq	.+120    	; 0xd1a <MDIO_u8SetDirectionBit+0x94>
     ca2:	84 30       	cpi	r24, 0x04	; 4
     ca4:	09 f4       	brne	.+2      	; 0xca8 <MDIO_u8SetDirectionBit+0x22>
     ca6:	55 c0       	rjmp	.+170    	; 0xd52 <MDIO_u8SetDirectionBit+0xcc>
     ca8:	74 c0       	rjmp	.+232    	; 0xd92 <MDIO_u8SetDirectionBit+0x10c>
     caa:	41 11       	cpse	r20, r1
     cac:	0d c0       	rjmp	.+26     	; 0xcc8 <MDIO_u8SetDirectionBit+0x42>
     cae:	9a b3       	in	r25, 0x1a	; 26
     cb0:	21 e0       	ldi	r18, 0x01	; 1
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <MDIO_u8SetDirectionBit+0x34>
     cb6:	22 0f       	add	r18, r18
     cb8:	33 1f       	adc	r19, r19
     cba:	6a 95       	dec	r22
     cbc:	e2 f7       	brpl	.-8      	; 0xcb6 <MDIO_u8SetDirectionBit+0x30>
     cbe:	82 2f       	mov	r24, r18
     cc0:	80 95       	com	r24
     cc2:	89 23       	and	r24, r25
     cc4:	8a bb       	out	0x1a, r24	; 26
     cc6:	0a c0       	rjmp	.+20     	; 0xcdc <MDIO_u8SetDirectionBit+0x56>
     cc8:	2a b3       	in	r18, 0x1a	; 26
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <MDIO_u8SetDirectionBit+0x4e>
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	6a 95       	dec	r22
     cd6:	e2 f7       	brpl	.-8      	; 0xcd0 <MDIO_u8SetDirectionBit+0x4a>
     cd8:	82 2b       	or	r24, r18
     cda:	8a bb       	out	0x1a, r24	; 26
     cdc:	8a bb       	out	0x1a, r24	; 26
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	08 95       	ret
     ce2:	41 11       	cpse	r20, r1
     ce4:	0d c0       	rjmp	.+26     	; 0xd00 <MDIO_u8SetDirectionBit+0x7a>
     ce6:	97 b3       	in	r25, 0x17	; 23
     ce8:	21 e0       	ldi	r18, 0x01	; 1
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <MDIO_u8SetDirectionBit+0x6c>
     cee:	22 0f       	add	r18, r18
     cf0:	33 1f       	adc	r19, r19
     cf2:	6a 95       	dec	r22
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <MDIO_u8SetDirectionBit+0x68>
     cf6:	82 2f       	mov	r24, r18
     cf8:	80 95       	com	r24
     cfa:	89 23       	and	r24, r25
     cfc:	87 bb       	out	0x17, r24	; 23
     cfe:	0a c0       	rjmp	.+20     	; 0xd14 <MDIO_u8SetDirectionBit+0x8e>
     d00:	27 b3       	in	r18, 0x17	; 23
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <MDIO_u8SetDirectionBit+0x86>
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	6a 95       	dec	r22
     d0e:	e2 f7       	brpl	.-8      	; 0xd08 <MDIO_u8SetDirectionBit+0x82>
     d10:	82 2b       	or	r24, r18
     d12:	87 bb       	out	0x17, r24	; 23
     d14:	87 bb       	out	0x17, r24	; 23
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	08 95       	ret
     d1a:	41 11       	cpse	r20, r1
     d1c:	0d c0       	rjmp	.+26     	; 0xd38 <MDIO_u8SetDirectionBit+0xb2>
     d1e:	94 b3       	in	r25, 0x14	; 20
     d20:	21 e0       	ldi	r18, 0x01	; 1
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <MDIO_u8SetDirectionBit+0xa4>
     d26:	22 0f       	add	r18, r18
     d28:	33 1f       	adc	r19, r19
     d2a:	6a 95       	dec	r22
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <MDIO_u8SetDirectionBit+0xa0>
     d2e:	82 2f       	mov	r24, r18
     d30:	80 95       	com	r24
     d32:	89 23       	and	r24, r25
     d34:	84 bb       	out	0x14, r24	; 20
     d36:	0a c0       	rjmp	.+20     	; 0xd4c <MDIO_u8SetDirectionBit+0xc6>
     d38:	24 b3       	in	r18, 0x14	; 20
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <MDIO_u8SetDirectionBit+0xbe>
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	6a 95       	dec	r22
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <MDIO_u8SetDirectionBit+0xba>
     d48:	82 2b       	or	r24, r18
     d4a:	84 bb       	out	0x14, r24	; 20
     d4c:	84 bb       	out	0x14, r24	; 20
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	08 95       	ret
     d52:	41 11       	cpse	r20, r1
     d54:	0d c0       	rjmp	.+26     	; 0xd70 <MDIO_u8SetDirectionBit+0xea>
     d56:	91 b3       	in	r25, 0x11	; 17
     d58:	21 e0       	ldi	r18, 0x01	; 1
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <MDIO_u8SetDirectionBit+0xdc>
     d5e:	22 0f       	add	r18, r18
     d60:	33 1f       	adc	r19, r19
     d62:	6a 95       	dec	r22
     d64:	e2 f7       	brpl	.-8      	; 0xd5e <MDIO_u8SetDirectionBit+0xd8>
     d66:	82 2f       	mov	r24, r18
     d68:	80 95       	com	r24
     d6a:	89 23       	and	r24, r25
     d6c:	81 bb       	out	0x11, r24	; 17
     d6e:	0a c0       	rjmp	.+20     	; 0xd84 <MDIO_u8SetDirectionBit+0xfe>
     d70:	21 b3       	in	r18, 0x11	; 17
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <MDIO_u8SetDirectionBit+0xf6>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	6a 95       	dec	r22
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <MDIO_u8SetDirectionBit+0xf2>
     d80:	82 2b       	or	r24, r18
     d82:	81 bb       	out	0x11, r24	; 17
     d84:	81 bb       	out	0x11, r24	; 17
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	08 95       	ret
     d8a:	82 e0       	ldi	r24, 0x02	; 2
     d8c:	08 95       	ret
     d8e:	83 e0       	ldi	r24, 0x03	; 3
     d90:	08 95       	ret
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	08 95       	ret

00000d96 <MDIO_u8WriteBit>:
     d96:	68 30       	cpi	r22, 0x08	; 8
     d98:	08 f0       	brcs	.+2      	; 0xd9c <MDIO_u8WriteBit+0x6>
     d9a:	7b c0       	rjmp	.+246    	; 0xe92 <MDIO_u8WriteBit+0xfc>
     d9c:	42 30       	cpi	r20, 0x02	; 2
     d9e:	08 f0       	brcs	.+2      	; 0xda2 <MDIO_u8WriteBit+0xc>
     da0:	7a c0       	rjmp	.+244    	; 0xe96 <MDIO_u8WriteBit+0x100>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	29 f1       	breq	.+74     	; 0xdf0 <MDIO_u8WriteBit+0x5a>
     da6:	18 f4       	brcc	.+6      	; 0xdae <MDIO_u8WriteBit+0x18>
     da8:	81 30       	cpi	r24, 0x01	; 1
     daa:	39 f0       	breq	.+14     	; 0xdba <MDIO_u8WriteBit+0x24>
     dac:	76 c0       	rjmp	.+236    	; 0xe9a <MDIO_u8WriteBit+0x104>
     dae:	83 30       	cpi	r24, 0x03	; 3
     db0:	d1 f1       	breq	.+116    	; 0xe26 <MDIO_u8WriteBit+0x90>
     db2:	84 30       	cpi	r24, 0x04	; 4
     db4:	09 f4       	brne	.+2      	; 0xdb8 <MDIO_u8WriteBit+0x22>
     db6:	52 c0       	rjmp	.+164    	; 0xe5c <MDIO_u8WriteBit+0xc6>
     db8:	70 c0       	rjmp	.+224    	; 0xe9a <MDIO_u8WriteBit+0x104>
     dba:	41 11       	cpse	r20, r1
     dbc:	0d c0       	rjmp	.+26     	; 0xdd8 <MDIO_u8WriteBit+0x42>
     dbe:	2b b3       	in	r18, 0x1b	; 27
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <MDIO_u8WriteBit+0x34>
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	6a 95       	dec	r22
     dcc:	e2 f7       	brpl	.-8      	; 0xdc6 <MDIO_u8WriteBit+0x30>
     dce:	80 95       	com	r24
     dd0:	82 23       	and	r24, r18
     dd2:	8b bb       	out	0x1b, r24	; 27
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	08 95       	ret
     dd8:	2b b3       	in	r18, 0x1b	; 27
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <MDIO_u8WriteBit+0x4e>
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	6a 95       	dec	r22
     de6:	e2 f7       	brpl	.-8      	; 0xde0 <MDIO_u8WriteBit+0x4a>
     de8:	82 2b       	or	r24, r18
     dea:	8b bb       	out	0x1b, r24	; 27
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	08 95       	ret
     df0:	41 11       	cpse	r20, r1
     df2:	0d c0       	rjmp	.+26     	; 0xe0e <MDIO_u8WriteBit+0x78>
     df4:	28 b3       	in	r18, 0x18	; 24
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <MDIO_u8WriteBit+0x6a>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	6a 95       	dec	r22
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <MDIO_u8WriteBit+0x66>
     e04:	80 95       	com	r24
     e06:	82 23       	and	r24, r18
     e08:	88 bb       	out	0x18, r24	; 24
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	08 95       	ret
     e0e:	28 b3       	in	r18, 0x18	; 24
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <MDIO_u8WriteBit+0x84>
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	6a 95       	dec	r22
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <MDIO_u8WriteBit+0x80>
     e1e:	82 2b       	or	r24, r18
     e20:	88 bb       	out	0x18, r24	; 24
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	08 95       	ret
     e26:	41 11       	cpse	r20, r1
     e28:	0d c0       	rjmp	.+26     	; 0xe44 <MDIO_u8WriteBit+0xae>
     e2a:	25 b3       	in	r18, 0x15	; 21
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <MDIO_u8WriteBit+0xa0>
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	6a 95       	dec	r22
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <MDIO_u8WriteBit+0x9c>
     e3a:	80 95       	com	r24
     e3c:	82 23       	and	r24, r18
     e3e:	85 bb       	out	0x15, r24	; 21
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	08 95       	ret
     e44:	25 b3       	in	r18, 0x15	; 21
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <MDIO_u8WriteBit+0xba>
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	6a 95       	dec	r22
     e52:	e2 f7       	brpl	.-8      	; 0xe4c <MDIO_u8WriteBit+0xb6>
     e54:	82 2b       	or	r24, r18
     e56:	85 bb       	out	0x15, r24	; 21
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	08 95       	ret
     e5c:	41 11       	cpse	r20, r1
     e5e:	0d c0       	rjmp	.+26     	; 0xe7a <MDIO_u8WriteBit+0xe4>
     e60:	22 b3       	in	r18, 0x12	; 18
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <MDIO_u8WriteBit+0xd6>
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	6a 95       	dec	r22
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <MDIO_u8WriteBit+0xd2>
     e70:	80 95       	com	r24
     e72:	82 23       	and	r24, r18
     e74:	82 bb       	out	0x12, r24	; 18
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	08 95       	ret
     e7a:	22 b3       	in	r18, 0x12	; 18
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <MDIO_u8WriteBit+0xf0>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	6a 95       	dec	r22
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <MDIO_u8WriteBit+0xec>
     e8a:	82 2b       	or	r24, r18
     e8c:	82 bb       	out	0x12, r24	; 18
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	08 95       	ret
     e92:	82 e0       	ldi	r24, 0x02	; 2
     e94:	08 95       	ret
     e96:	83 e0       	ldi	r24, 0x03	; 3
     e98:	08 95       	ret
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	08 95       	ret

00000e9e <MDIO_u8ReadBit>:
     e9e:	68 30       	cpi	r22, 0x08	; 8
     ea0:	78 f5       	brcc	.+94     	; 0xf00 <MDIO_u8ReadBit+0x62>
     ea2:	82 30       	cpi	r24, 0x02	; 2
     ea4:	91 f0       	breq	.+36     	; 0xeca <MDIO_u8ReadBit+0x2c>
     ea6:	18 f4       	brcc	.+6      	; 0xeae <MDIO_u8ReadBit+0x10>
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	31 f0       	breq	.+12     	; 0xeb8 <MDIO_u8ReadBit+0x1a>
     eac:	2b c0       	rjmp	.+86     	; 0xf04 <MDIO_u8ReadBit+0x66>
     eae:	83 30       	cpi	r24, 0x03	; 3
     eb0:	a9 f0       	breq	.+42     	; 0xedc <MDIO_u8ReadBit+0x3e>
     eb2:	84 30       	cpi	r24, 0x04	; 4
     eb4:	e1 f0       	breq	.+56     	; 0xeee <MDIO_u8ReadBit+0x50>
     eb6:	26 c0       	rjmp	.+76     	; 0xf04 <MDIO_u8ReadBit+0x66>
     eb8:	89 b3       	in	r24, 0x19	; 25
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <MDIO_u8ReadBit+0x24>
     ebe:	95 95       	asr	r25
     ec0:	87 95       	ror	r24
     ec2:	6a 95       	dec	r22
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <MDIO_u8ReadBit+0x20>
     ec6:	81 70       	andi	r24, 0x01	; 1
     ec8:	08 95       	ret
     eca:	86 b3       	in	r24, 0x16	; 22
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <MDIO_u8ReadBit+0x36>
     ed0:	95 95       	asr	r25
     ed2:	87 95       	ror	r24
     ed4:	6a 95       	dec	r22
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <MDIO_u8ReadBit+0x32>
     ed8:	81 70       	andi	r24, 0x01	; 1
     eda:	08 95       	ret
     edc:	83 b3       	in	r24, 0x13	; 19
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <MDIO_u8ReadBit+0x48>
     ee2:	95 95       	asr	r25
     ee4:	87 95       	ror	r24
     ee6:	6a 95       	dec	r22
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <MDIO_u8ReadBit+0x44>
     eea:	81 70       	andi	r24, 0x01	; 1
     eec:	08 95       	ret
     eee:	80 b3       	in	r24, 0x10	; 16
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <MDIO_u8ReadBit+0x5a>
     ef4:	95 95       	asr	r25
     ef6:	87 95       	ror	r24
     ef8:	6a 95       	dec	r22
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <MDIO_u8ReadBit+0x56>
     efc:	81 70       	andi	r24, 0x01	; 1
     efe:	08 95       	ret
     f00:	83 e0       	ldi	r24, 0x03	; 3
     f02:	08 95       	ret
     f04:	82 e0       	ldi	r24, 0x02	; 2
     f06:	08 95       	ret

00000f08 <MDIO_u8ConfigPullupBit>:
 *               resistor status value out of range
 */
u8 MDIO_u8ConfigPullupBit(u8 Copy_u8Reg,u8 Copy_u8Bit,u8 Copy_u8PullUpResStatus)
{
	/*Pull up res status check condition*/
	if( (MDIO_EN_PULL_UP_RES == Copy_u8PullUpResStatus) || (MDIO_DIS_PULL_UP_RES == Copy_u8PullUpResStatus) )
     f08:	42 30       	cpi	r20, 0x02	; 2
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <MDIO_u8ConfigPullupBit+0x6>
     f0c:	7b c0       	rjmp	.+246    	; 0x1004 <MDIO_u8ConfigPullupBit+0xfc>
	{
		/*bit number check condition*/
		if( (Copy_u8Bit >= 0) && (Copy_u8Bit < 8) )
     f0e:	68 30       	cpi	r22, 0x08	; 8
     f10:	08 f0       	brcs	.+2      	; 0xf14 <MDIO_u8ConfigPullupBit+0xc>
     f12:	7a c0       	rjmp	.+244    	; 0x1008 <MDIO_u8ConfigPullupBit+0x100>
		{
			/*register switch case*/
			switch (Copy_u8Reg)
     f14:	82 30       	cpi	r24, 0x02	; 2
     f16:	29 f1       	breq	.+74     	; 0xf62 <MDIO_u8ConfigPullupBit+0x5a>
     f18:	18 f4       	brcc	.+6      	; 0xf20 <MDIO_u8ConfigPullupBit+0x18>
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	39 f0       	breq	.+14     	; 0xf2c <MDIO_u8ConfigPullupBit+0x24>
     f1e:	76 c0       	rjmp	.+236    	; 0x100c <MDIO_u8ConfigPullupBit+0x104>
     f20:	83 30       	cpi	r24, 0x03	; 3
     f22:	d1 f1       	breq	.+116    	; 0xf98 <MDIO_u8ConfigPullupBit+0x90>
     f24:	84 30       	cpi	r24, 0x04	; 4
     f26:	09 f4       	brne	.+2      	; 0xf2a <MDIO_u8ConfigPullupBit+0x22>
     f28:	52 c0       	rjmp	.+164    	; 0xfce <MDIO_u8ConfigPullupBit+0xc6>
     f2a:	70 c0       	rjmp	.+224    	; 0x100c <MDIO_u8ConfigPullupBit+0x104>
			{
				/*Configure bit value in PORTx reg with choosen pull up res status(Copy_u8PullUpResStatus)*/
				case MDIO_PORTA : {L_UTILS_SET_BIT_VALUE(DIO_PORTA,Copy_u8Bit,Copy_u8PullUpResStatus); return 0;} break;
     f2c:	41 11       	cpse	r20, r1
     f2e:	0d c0       	rjmp	.+26     	; 0xf4a <MDIO_u8ConfigPullupBit+0x42>
     f30:	2b b3       	in	r18, 0x1b	; 27
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <MDIO_u8ConfigPullupBit+0x34>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	6a 95       	dec	r22
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <MDIO_u8ConfigPullupBit+0x30>
     f40:	80 95       	com	r24
     f42:	82 23       	and	r24, r18
     f44:	8b bb       	out	0x1b, r24	; 27
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	08 95       	ret
     f4a:	2b b3       	in	r18, 0x1b	; 27
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <MDIO_u8ConfigPullupBit+0x4e>
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	6a 95       	dec	r22
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <MDIO_u8ConfigPullupBit+0x4a>
     f5a:	82 2b       	or	r24, r18
     f5c:	8b bb       	out	0x1b, r24	; 27
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	08 95       	ret
				case MDIO_PORTB : {L_UTILS_SET_BIT_VALUE(DIO_PORTB,Copy_u8Bit,Copy_u8PullUpResStatus); return 0;} break;
     f62:	41 11       	cpse	r20, r1
     f64:	0d c0       	rjmp	.+26     	; 0xf80 <MDIO_u8ConfigPullupBit+0x78>
     f66:	28 b3       	in	r18, 0x18	; 24
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <MDIO_u8ConfigPullupBit+0x6a>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	6a 95       	dec	r22
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <MDIO_u8ConfigPullupBit+0x66>
     f76:	80 95       	com	r24
     f78:	82 23       	and	r24, r18
     f7a:	88 bb       	out	0x18, r24	; 24
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	08 95       	ret
     f80:	28 b3       	in	r18, 0x18	; 24
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <MDIO_u8ConfigPullupBit+0x84>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	6a 95       	dec	r22
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <MDIO_u8ConfigPullupBit+0x80>
     f90:	82 2b       	or	r24, r18
     f92:	88 bb       	out	0x18, r24	; 24
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	08 95       	ret
				case MDIO_PORTC : {L_UTILS_SET_BIT_VALUE(DIO_PORTC,Copy_u8Bit,Copy_u8PullUpResStatus); return 0;} break;
     f98:	41 11       	cpse	r20, r1
     f9a:	0d c0       	rjmp	.+26     	; 0xfb6 <MDIO_u8ConfigPullupBit+0xae>
     f9c:	25 b3       	in	r18, 0x15	; 21
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <MDIO_u8ConfigPullupBit+0xa0>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	6a 95       	dec	r22
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <MDIO_u8ConfigPullupBit+0x9c>
     fac:	80 95       	com	r24
     fae:	82 23       	and	r24, r18
     fb0:	85 bb       	out	0x15, r24	; 21
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	08 95       	ret
     fb6:	25 b3       	in	r18, 0x15	; 21
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <MDIO_u8ConfigPullupBit+0xba>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	6a 95       	dec	r22
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <MDIO_u8ConfigPullupBit+0xb6>
     fc6:	82 2b       	or	r24, r18
     fc8:	85 bb       	out	0x15, r24	; 21
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	08 95       	ret
				case MDIO_PORTD : {L_UTILS_SET_BIT_VALUE(DIO_PORTD,Copy_u8Bit,Copy_u8PullUpResStatus); return 0;} break;
     fce:	41 11       	cpse	r20, r1
     fd0:	0d c0       	rjmp	.+26     	; 0xfec <MDIO_u8ConfigPullupBit+0xe4>
     fd2:	22 b3       	in	r18, 0x12	; 18
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <MDIO_u8ConfigPullupBit+0xd6>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	6a 95       	dec	r22
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <MDIO_u8ConfigPullupBit+0xd2>
     fe2:	80 95       	com	r24
     fe4:	82 23       	and	r24, r18
     fe6:	82 bb       	out	0x12, r24	; 18
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	08 95       	ret
     fec:	22 b3       	in	r18, 0x12	; 18
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <MDIO_u8ConfigPullupBit+0xf0>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	6a 95       	dec	r22
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <MDIO_u8ConfigPullupBit+0xec>
     ffc:	82 2b       	or	r24, r18
     ffe:	82 bb       	out	0x12, r24	; 18
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	08 95       	ret

	}
	else
	{
		/*Report Pull up res status value out of range error*/
		return 3;
    1004:	83 e0       	ldi	r24, 0x03	; 3
    1006:	08 95       	ret
			}/*end of Register switch case*/
		}
		else
		{
			/*Report Bit number out of range error*/
			return 2; 
    1008:	82 e0       	ldi	r24, 0x02	; 2
    100a:	08 95       	ret
				/*Configure bit value in PORTx reg with choosen pull up res status(Copy_u8PullUpResStatus)*/
				case MDIO_PORTA : {L_UTILS_SET_BIT_VALUE(DIO_PORTA,Copy_u8Bit,Copy_u8PullUpResStatus); return 0;} break;
				case MDIO_PORTB : {L_UTILS_SET_BIT_VALUE(DIO_PORTB,Copy_u8Bit,Copy_u8PullUpResStatus); return 0;} break;
				case MDIO_PORTC : {L_UTILS_SET_BIT_VALUE(DIO_PORTC,Copy_u8Bit,Copy_u8PullUpResStatus); return 0;} break;
				case MDIO_PORTD : {L_UTILS_SET_BIT_VALUE(DIO_PORTD,Copy_u8Bit,Copy_u8PullUpResStatus); return 0;} break;
				default         : return 1;  /*error Undefined Port*/
    100c:	81 e0       	ldi	r24, 0x01	; 1
		/*Report Pull up res status value out of range error*/
		return 3;

	}/*end of Pull up res status check condition*/
	
    100e:	08 95       	ret

00001010 <MTIMER0_voidStartTimer>:
 * Description : Callback function for Timer0 over flow Interrupt  
 * Arguments   : pointer to function Copy_Ptr 
 * return      : void  
 */
 void MTIMER0_voidOverFlowCallBack(void(*Copy_Ptr)(void))
 {
    1010:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <MTIMER0_u8TCCR0Value>
    1014:	83 bf       	out	0x33, r24	; 51
    1016:	08 95       	ret

00001018 <MTIMER0_voidInitializeTimer0>:
    1018:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <MTIMER0_u8TCCR0Value>
    101c:	28 e0       	ldi	r18, 0x08	; 8
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	30 93 6e 00 	sts	0x006E, r19	; 0x80006e <MTIMER0_u16Prescaler+0x1>
    1024:	20 93 6d 00 	sts	0x006D, r18	; 0x80006d <MTIMER0_u16Prescaler>
    1028:	80 7b       	andi	r24, 0xB0	; 176
    102a:	82 60       	ori	r24, 0x02	; 2
    102c:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <MTIMER0_u8TCCR0Value>
    1030:	8f b7       	in	r24, 0x3f	; 63
    1032:	80 68       	ori	r24, 0x80	; 128
    1034:	8f bf       	out	0x3f, r24	; 63
    1036:	89 b7       	in	r24, 0x39	; 57
    1038:	81 60       	ori	r24, 0x01	; 1
    103a:	89 bf       	out	0x39, r24	; 57
    103c:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <MTIMER0_u8TCCR0Value>
    1040:	8f 7c       	andi	r24, 0xCF	; 207
    1042:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <MTIMER0_u8TCCR0Value>
    1046:	08 95       	ret

00001048 <MTIMER0_voidSetDesiredTime_ms>:
    1048:	8f 92       	push	r8
    104a:	9f 92       	push	r9
    104c:	af 92       	push	r10
    104e:	bf 92       	push	r11
    1050:	cf 92       	push	r12
    1052:	df 92       	push	r13
    1054:	ef 92       	push	r14
    1056:	ff 92       	push	r15
    1058:	4b 01       	movw	r8, r22
    105a:	5c 01       	movw	r10, r24
    105c:	a0 91 6d 00 	lds	r26, 0x006D	; 0x80006d <MTIMER0_u16Prescaler>
    1060:	b0 91 6e 00 	lds	r27, 0x006E	; 0x80006e <MTIMER0_u16Prescaler+0x1>
    1064:	20 e4       	ldi	r18, 0x40	; 64
    1066:	32 e4       	ldi	r19, 0x42	; 66
    1068:	4f e0       	ldi	r20, 0x0F	; 15
    106a:	50 e0       	ldi	r21, 0x00	; 0
    106c:	0e 94 8e 09 	call	0x131c	; 0x131c <__muluhisi3>
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	32 e1       	ldi	r19, 0x12	; 18
    1074:	4a e7       	ldi	r20, 0x7A	; 122
    1076:	50 e0       	ldi	r21, 0x00	; 0
    1078:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__udivmodsi4>
    107c:	cc 24       	eor	r12, r12
    107e:	d2 2e       	mov	r13, r18
    1080:	e3 2e       	mov	r14, r19
    1082:	f4 2e       	mov	r15, r20
    1084:	a8 ee       	ldi	r26, 0xE8	; 232
    1086:	b3 e0       	ldi	r27, 0x03	; 3
    1088:	a5 01       	movw	r20, r10
    108a:	94 01       	movw	r18, r8
    108c:	0e 94 8e 09 	call	0x131c	; 0x131c <__muluhisi3>
    1090:	a7 01       	movw	r20, r14
    1092:	96 01       	movw	r18, r12
    1094:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__udivmodsi4>
    1098:	20 93 34 01 	sts	0x0134, r18	; 0x800134 <MTIMER0_u32OverFlowNo>
    109c:	30 93 35 01 	sts	0x0135, r19	; 0x800135 <MTIMER0_u32OverFlowNo+0x1>
    10a0:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <MTIMER0_u32OverFlowNo+0x2>
    10a4:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <MTIMER0_u32OverFlowNo+0x3>
    10a8:	12 be       	out	0x32, r1	; 50
    10aa:	61 15       	cp	r22, r1
    10ac:	71 05       	cpc	r23, r1
    10ae:	81 05       	cpc	r24, r1
    10b0:	91 05       	cpc	r25, r1
    10b2:	b9 f0       	breq	.+46     	; 0x10e2 <MTIMER0_voidSetDesiredTime_ms+0x9a>
    10b4:	61 95       	neg	r22
    10b6:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <MTIMER0_u8TCNT0Preload>
    10ba:	62 bf       	out	0x32, r22	; 50
    10bc:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MTIMER0_u32OverFlowNo>
    10c0:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <MTIMER0_u32OverFlowNo+0x1>
    10c4:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <MTIMER0_u32OverFlowNo+0x2>
    10c8:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <MTIMER0_u32OverFlowNo+0x3>
    10cc:	01 96       	adiw	r24, 0x01	; 1
    10ce:	a1 1d       	adc	r26, r1
    10d0:	b1 1d       	adc	r27, r1
    10d2:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <MTIMER0_u32OverFlowNo>
    10d6:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <MTIMER0_u32OverFlowNo+0x1>
    10da:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <MTIMER0_u32OverFlowNo+0x2>
    10de:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <MTIMER0_u32OverFlowNo+0x3>
    10e2:	0e 94 08 08 	call	0x1010	; 0x1010 <MTIMER0_voidStartTimer>
    10e6:	ff 90       	pop	r15
    10e8:	ef 90       	pop	r14
    10ea:	df 90       	pop	r13
    10ec:	cf 90       	pop	r12
    10ee:	bf 90       	pop	r11
    10f0:	af 90       	pop	r10
    10f2:	9f 90       	pop	r9
    10f4:	8f 90       	pop	r8
    10f6:	08 95       	ret

000010f8 <__vector_11>:
 * Description : Timer0 over flow ISR  
 * Arguments   : void 
 * return      : void  
 */
void __vector_11(void) /*Timer0 over flow ISR*/
{
    10f8:	1f 92       	push	r1
    10fa:	0f 92       	push	r0
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	0f 92       	push	r0
    1100:	11 24       	eor	r1, r1
    1102:	2f 93       	push	r18
    1104:	3f 93       	push	r19
    1106:	4f 93       	push	r20
    1108:	5f 93       	push	r21
    110a:	6f 93       	push	r22
    110c:	7f 93       	push	r23
    110e:	8f 93       	push	r24
    1110:	9f 93       	push	r25
    1112:	af 93       	push	r26
    1114:	bf 93       	push	r27
    1116:	ef 93       	push	r30
    1118:	ff 93       	push	r31
	static u32 Local_u32Counter = 0;
	Local_u32Counter++;
    111a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Local_u32Counter.1629>
    111e:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <Local_u32Counter.1629+0x1>
    1122:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <Local_u32Counter.1629+0x2>
    1126:	b0 91 31 01 	lds	r27, 0x0131	; 0x800131 <Local_u32Counter.1629+0x3>
    112a:	01 96       	adiw	r24, 0x01	; 1
    112c:	a1 1d       	adc	r26, r1
    112e:	b1 1d       	adc	r27, r1
    1130:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <Local_u32Counter.1629>
    1134:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <Local_u32Counter.1629+0x1>
    1138:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <Local_u32Counter.1629+0x2>
    113c:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <Local_u32Counter.1629+0x3>
	if(Local_u32Counter == MTIMER0_u32OverFlowNo)
    1140:	40 91 34 01 	lds	r20, 0x0134	; 0x800134 <MTIMER0_u32OverFlowNo>
    1144:	50 91 35 01 	lds	r21, 0x0135	; 0x800135 <MTIMER0_u32OverFlowNo+0x1>
    1148:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <MTIMER0_u32OverFlowNo+0x2>
    114c:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <MTIMER0_u32OverFlowNo+0x3>
    1150:	84 17       	cp	r24, r20
    1152:	95 07       	cpc	r25, r21
    1154:	a6 07       	cpc	r26, r22
    1156:	b7 07       	cpc	r27, r23
    1158:	69 f4       	brne	.+26     	; 0x1174 <__vector_11+0x7c>
	{
		/*Run scheduler*/
		OS_voidScheduler();
    115a:	0e 94 1e 09 	call	0x123c	; 0x123c <OS_voidScheduler>
		
		Local_u32Counter = 0;
    115e:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <Local_u32Counter.1629>
    1162:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <Local_u32Counter.1629+0x1>
    1166:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <Local_u32Counter.1629+0x2>
    116a:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <Local_u32Counter.1629+0x3>
		MTIMER0_TCNT0 =   MTIMER0_u8TCNT0Preload;
    116e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <MTIMER0_u8TCNT0Preload>
    1172:	82 bf       	out	0x32, r24	; 50
	}
		
	
}/*end of __vector_11()*/
    1174:	ff 91       	pop	r31
    1176:	ef 91       	pop	r30
    1178:	bf 91       	pop	r27
    117a:	af 91       	pop	r26
    117c:	9f 91       	pop	r25
    117e:	8f 91       	pop	r24
    1180:	7f 91       	pop	r23
    1182:	6f 91       	pop	r22
    1184:	5f 91       	pop	r21
    1186:	4f 91       	pop	r20
    1188:	3f 91       	pop	r19
    118a:	2f 91       	pop	r18
    118c:	0f 90       	pop	r0
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	0f 90       	pop	r0
    1192:	1f 90       	pop	r1
    1194:	18 95       	reti

00001196 <OS_voidInitializeOS>:
		 /*Report task to Resume is out of range*/
		 return 1; /*operation is Not OK*/
	 
	 }/*end of priority check*/
 
 }/*end of OS_u8ResumeTask()*/
    1196:	0e 94 0c 08 	call	0x1018	; 0x1018 <MTIMER0_voidInitializeTimer0>
    119a:	08 95       	ret

0000119c <OS_voidStartOS>:
    119c:	65 e0       	ldi	r22, 0x05	; 5
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	0e 94 24 08 	call	0x1048	; 0x1048 <MTIMER0_voidSetDesiredTime_ms>
    11a8:	08 95       	ret

000011aa <OS_voidCreateTask>:
    11aa:	4f 92       	push	r4
    11ac:	5f 92       	push	r5
    11ae:	6f 92       	push	r6
    11b0:	7f 92       	push	r7
    11b2:	8f 92       	push	r8
    11b4:	9f 92       	push	r9
    11b6:	af 92       	push	r10
    11b8:	bf 92       	push	r11
    11ba:	cf 92       	push	r12
    11bc:	0f 93       	push	r16
    11be:	1f 93       	push	r17
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	ab e0       	ldi	r26, 0x0B	; 11
    11ca:	a0 9f       	mul	r26, r16
    11cc:	f0 01       	movw	r30, r0
    11ce:	a1 9f       	mul	r26, r17
    11d0:	f0 0d       	add	r31, r0
    11d2:	11 24       	eor	r1, r1
    11d4:	e8 5c       	subi	r30, 0xC8	; 200
    11d6:	fe 4f       	sbci	r31, 0xFE	; 254
    11d8:	42 80       	ldd	r4, Z+2	; 0x02
    11da:	53 80       	ldd	r5, Z+3	; 0x03
    11dc:	64 80       	ldd	r6, Z+4	; 0x04
    11de:	75 80       	ldd	r7, Z+5	; 0x05
    11e0:	45 28       	or	r4, r5
    11e2:	46 28       	or	r4, r6
    11e4:	47 28       	or	r4, r7
    11e6:	c9 f4       	brne	.+50     	; 0x121a <OS_voidCreateTask+0x70>
    11e8:	05 30       	cpi	r16, 0x05	; 5
    11ea:	11 05       	cpc	r17, r1
    11ec:	21 05       	cpc	r18, r1
    11ee:	31 05       	cpc	r19, r1
    11f0:	b0 f4       	brcc	.+44     	; 0x121e <OS_voidCreateTask+0x74>
    11f2:	a0 9f       	mul	r26, r16
    11f4:	f0 01       	movw	r30, r0
    11f6:	a1 9f       	mul	r26, r17
    11f8:	f0 0d       	add	r31, r0
    11fa:	11 24       	eor	r1, r1
    11fc:	e8 5c       	subi	r30, 0xC8	; 200
    11fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1200:	42 83       	std	Z+2, r20	; 0x02
    1202:	53 83       	std	Z+3, r21	; 0x03
    1204:	64 83       	std	Z+4, r22	; 0x04
    1206:	75 83       	std	Z+5, r23	; 0x05
    1208:	91 83       	std	Z+1, r25	; 0x01
    120a:	80 83       	st	Z, r24
    120c:	86 82       	std	Z+6, r8	; 0x06
    120e:	97 82       	std	Z+7, r9	; 0x07
    1210:	a0 86       	std	Z+8, r10	; 0x08
    1212:	b1 86       	std	Z+9, r11	; 0x09
    1214:	c2 86       	std	Z+10, r12	; 0x0a
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	03 c0       	rjmp	.+6      	; 0x1220 <OS_voidCreateTask+0x76>
    121a:	82 e0       	ldi	r24, 0x02	; 2
    121c:	01 c0       	rjmp	.+2      	; 0x1220 <OS_voidCreateTask+0x76>
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	1f 91       	pop	r17
    1226:	0f 91       	pop	r16
    1228:	cf 90       	pop	r12
    122a:	bf 90       	pop	r11
    122c:	af 90       	pop	r10
    122e:	9f 90       	pop	r9
    1230:	8f 90       	pop	r8
    1232:	7f 90       	pop	r7
    1234:	6f 90       	pop	r6
    1236:	5f 90       	pop	r5
    1238:	4f 90       	pop	r4
    123a:	08 95       	ret

0000123c <OS_voidScheduler>:
 * Description : scheduler algorithm    
 * Arguments   : void
 * return      : void 
 */
 void OS_voidScheduler(void)
 {
    123c:	ef 92       	push	r14
    123e:	ff 92       	push	r15
    1240:	0f 93       	push	r16
    1242:	1f 93       	push	r17
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
    1248:	c8 e3       	ldi	r28, 0x38	; 56
    124a:	d1 e0       	ldi	r29, 0x01	; 1
    124c:	0f 2e       	mov	r0, r31
    124e:	ff e6       	ldi	r31, 0x6F	; 111
    1250:	ef 2e       	mov	r14, r31
    1252:	f1 e0       	ldi	r31, 0x01	; 1
    1254:	ff 2e       	mov	r15, r31
    1256:	f0 2d       	mov	r31, r0
	  
	 /*Loop all tasks in queue*/
     for (u32 i = 0; i < NO_OF_TASKS; i++)
     {
		 /*Task exists check*/
		 if(SysTasks[i].Periodicity != 0)
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	9b 81       	ldd	r25, Y+3	; 0x03
    125c:	ac 81       	ldd	r26, Y+4	; 0x04
    125e:	bd 81       	ldd	r27, Y+5	; 0x05
    1260:	89 2b       	or	r24, r25
    1262:	8a 2b       	or	r24, r26
    1264:	8b 2b       	or	r24, r27
    1266:	e9 f0       	breq	.+58     	; 0x12a2 <OS_voidScheduler+0x66>
		 {
			 /*Check task state*/
			 if(SysTasks[i].State == OS_TASK_READY)/*if Task is running not suspended*/
    1268:	8a 85       	ldd	r24, Y+10	; 0x0a
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	d1 f4       	brne	.+52     	; 0x12a2 <OS_voidScheduler+0x66>
			 {
				 /*decrement task first delay*/
				 SysTasks[i].FirstDelay-- ;
    126e:	8e 81       	ldd	r24, Y+6	; 0x06
    1270:	9f 81       	ldd	r25, Y+7	; 0x07
    1272:	a8 85       	ldd	r26, Y+8	; 0x08
    1274:	b9 85       	ldd	r27, Y+9	; 0x09
    1276:	01 97       	sbiw	r24, 0x01	; 1
    1278:	a1 09       	sbc	r26, r1
    127a:	b1 09       	sbc	r27, r1
    127c:	8e 83       	std	Y+6, r24	; 0x06
    127e:	9f 83       	std	Y+7, r25	; 0x07
    1280:	a8 87       	std	Y+8, r26	; 0x08
    1282:	b9 87       	std	Y+9, r27	; 0x09
				 /*when it reaches 0 task time to execute*/
				 if (SysTasks[i].FirstDelay == 0)
    1284:	89 2b       	or	r24, r25
    1286:	8a 2b       	or	r24, r26
    1288:	8b 2b       	or	r24, r27
    128a:	59 f4       	brne	.+22     	; 0x12a2 <OS_voidScheduler+0x66>
				 {
					 /*execute task using task handler*/
					 (SysTasks[i].TaskHandler)(); 
    128c:	e8 81       	ld	r30, Y
    128e:	f9 81       	ldd	r31, Y+1	; 0x01
    1290:	09 95       	icall
					 /*Reinitialize task first delay again*/
					 SysTasks[i].FirstDelay = SysTasks[i].Periodicity; 
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	9b 81       	ldd	r25, Y+3	; 0x03
    1296:	ac 81       	ldd	r26, Y+4	; 0x04
    1298:	bd 81       	ldd	r27, Y+5	; 0x05
    129a:	8e 83       	std	Y+6, r24	; 0x06
    129c:	9f 83       	std	Y+7, r25	; 0x07
    129e:	a8 87       	std	Y+8, r26	; 0x08
    12a0:	b9 87       	std	Y+9, r27	; 0x09
    12a2:	2b 96       	adiw	r28, 0x0b	; 11
 {
	 /*Code before applying First delay concept*/
 	 /*Tick_Count++;*/
	  
	 /*Loop all tasks in queue*/
     for (u32 i = 0; i < NO_OF_TASKS; i++)
    12a4:	ce 15       	cp	r28, r14
    12a6:	df 05       	cpc	r29, r15
    12a8:	b9 f6       	brne	.-82     	; 0x1258 <OS_voidScheduler+0x1c>
            }
		  */
		 
     }/*end of task queue loop*/	
 
 }/*end of OS_voidScheduler()*/
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	ff 90       	pop	r15
    12b4:	ef 90       	pop	r14
    12b6:	08 95       	ret

000012b8 <__mulsi3>:
    12b8:	db 01       	movw	r26, r22
    12ba:	8f 93       	push	r24
    12bc:	9f 93       	push	r25
    12be:	0e 94 8e 09 	call	0x131c	; 0x131c <__muluhisi3>
    12c2:	bf 91       	pop	r27
    12c4:	af 91       	pop	r26
    12c6:	a2 9f       	mul	r26, r18
    12c8:	80 0d       	add	r24, r0
    12ca:	91 1d       	adc	r25, r1
    12cc:	a3 9f       	mul	r26, r19
    12ce:	90 0d       	add	r25, r0
    12d0:	b2 9f       	mul	r27, r18
    12d2:	90 0d       	add	r25, r0
    12d4:	11 24       	eor	r1, r1
    12d6:	08 95       	ret

000012d8 <__udivmodsi4>:
    12d8:	a1 e2       	ldi	r26, 0x21	; 33
    12da:	1a 2e       	mov	r1, r26
    12dc:	aa 1b       	sub	r26, r26
    12de:	bb 1b       	sub	r27, r27
    12e0:	fd 01       	movw	r30, r26
    12e2:	0d c0       	rjmp	.+26     	; 0x12fe <__udivmodsi4_ep>

000012e4 <__udivmodsi4_loop>:
    12e4:	aa 1f       	adc	r26, r26
    12e6:	bb 1f       	adc	r27, r27
    12e8:	ee 1f       	adc	r30, r30
    12ea:	ff 1f       	adc	r31, r31
    12ec:	a2 17       	cp	r26, r18
    12ee:	b3 07       	cpc	r27, r19
    12f0:	e4 07       	cpc	r30, r20
    12f2:	f5 07       	cpc	r31, r21
    12f4:	20 f0       	brcs	.+8      	; 0x12fe <__udivmodsi4_ep>
    12f6:	a2 1b       	sub	r26, r18
    12f8:	b3 0b       	sbc	r27, r19
    12fa:	e4 0b       	sbc	r30, r20
    12fc:	f5 0b       	sbc	r31, r21

000012fe <__udivmodsi4_ep>:
    12fe:	66 1f       	adc	r22, r22
    1300:	77 1f       	adc	r23, r23
    1302:	88 1f       	adc	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	1a 94       	dec	r1
    1308:	69 f7       	brne	.-38     	; 0x12e4 <__udivmodsi4_loop>
    130a:	60 95       	com	r22
    130c:	70 95       	com	r23
    130e:	80 95       	com	r24
    1310:	90 95       	com	r25
    1312:	9b 01       	movw	r18, r22
    1314:	ac 01       	movw	r20, r24
    1316:	bd 01       	movw	r22, r26
    1318:	cf 01       	movw	r24, r30
    131a:	08 95       	ret

0000131c <__muluhisi3>:
    131c:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__umulhisi3>
    1320:	a5 9f       	mul	r26, r21
    1322:	90 0d       	add	r25, r0
    1324:	b4 9f       	mul	r27, r20
    1326:	90 0d       	add	r25, r0
    1328:	a4 9f       	mul	r26, r20
    132a:	80 0d       	add	r24, r0
    132c:	91 1d       	adc	r25, r1
    132e:	11 24       	eor	r1, r1
    1330:	08 95       	ret

00001332 <__umulsidi3>:
    1332:	e8 94       	clt

00001334 <__umulsidi3_helper>:
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	fc 01       	movw	r30, r24
    133a:	db 01       	movw	r26, r22
    133c:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__umulhisi3>
    1340:	7f 93       	push	r23
    1342:	6f 93       	push	r22
    1344:	e9 01       	movw	r28, r18
    1346:	9a 01       	movw	r18, r20
    1348:	ac 01       	movw	r20, r24
    134a:	bf 93       	push	r27
    134c:	af 93       	push	r26
    134e:	3f 93       	push	r19
    1350:	2f 93       	push	r18
    1352:	df 01       	movw	r26, r30
    1354:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__umulhisi3>
    1358:	26 f4       	brtc	.+8      	; 0x1362 <__umulsidi3_helper+0x2e>
    135a:	6c 1b       	sub	r22, r28
    135c:	7d 0b       	sbc	r23, r29
    135e:	82 0b       	sbc	r24, r18
    1360:	93 0b       	sbc	r25, r19
    1362:	9e 01       	movw	r18, r28
    1364:	eb 01       	movw	r28, r22
    1366:	fc 01       	movw	r30, r24
    1368:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__muldi3_6>
    136c:	af 91       	pop	r26
    136e:	bf 91       	pop	r27
    1370:	2f 91       	pop	r18
    1372:	3f 91       	pop	r19
    1374:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__muldi3_6>
    1378:	be 01       	movw	r22, r28
    137a:	cf 01       	movw	r24, r30
    137c:	f9 01       	movw	r30, r18
    137e:	2f 91       	pop	r18
    1380:	3f 91       	pop	r19
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	08 95       	ret

00001388 <__ashrdi3>:
    1388:	97 fb       	bst	r25, 7
    138a:	10 f8       	bld	r1, 0

0000138c <__lshrdi3>:
    138c:	16 94       	lsr	r1
    138e:	00 08       	sbc	r0, r0
    1390:	0f 93       	push	r16
    1392:	08 30       	cpi	r16, 0x08	; 8
    1394:	98 f0       	brcs	.+38     	; 0x13bc <__lshrdi3+0x30>
    1396:	08 50       	subi	r16, 0x08	; 8
    1398:	23 2f       	mov	r18, r19
    139a:	34 2f       	mov	r19, r20
    139c:	45 2f       	mov	r20, r21
    139e:	56 2f       	mov	r21, r22
    13a0:	67 2f       	mov	r22, r23
    13a2:	78 2f       	mov	r23, r24
    13a4:	89 2f       	mov	r24, r25
    13a6:	90 2d       	mov	r25, r0
    13a8:	f4 cf       	rjmp	.-24     	; 0x1392 <__lshrdi3+0x6>
    13aa:	05 94       	asr	r0
    13ac:	97 95       	ror	r25
    13ae:	87 95       	ror	r24
    13b0:	77 95       	ror	r23
    13b2:	67 95       	ror	r22
    13b4:	57 95       	ror	r21
    13b6:	47 95       	ror	r20
    13b8:	37 95       	ror	r19
    13ba:	27 95       	ror	r18
    13bc:	0a 95       	dec	r16
    13be:	aa f7       	brpl	.-22     	; 0x13aa <__lshrdi3+0x1e>
    13c0:	0f 91       	pop	r16
    13c2:	08 95       	ret

000013c4 <__umulhisi3>:
    13c4:	a2 9f       	mul	r26, r18
    13c6:	b0 01       	movw	r22, r0
    13c8:	b3 9f       	mul	r27, r19
    13ca:	c0 01       	movw	r24, r0
    13cc:	a3 9f       	mul	r26, r19
    13ce:	70 0d       	add	r23, r0
    13d0:	81 1d       	adc	r24, r1
    13d2:	11 24       	eor	r1, r1
    13d4:	91 1d       	adc	r25, r1
    13d6:	b2 9f       	mul	r27, r18
    13d8:	70 0d       	add	r23, r0
    13da:	81 1d       	adc	r24, r1
    13dc:	11 24       	eor	r1, r1
    13de:	91 1d       	adc	r25, r1
    13e0:	08 95       	ret

000013e2 <__muldi3_6>:
    13e2:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__umulhisi3>
    13e6:	46 0f       	add	r20, r22
    13e8:	57 1f       	adc	r21, r23
    13ea:	c8 1f       	adc	r28, r24
    13ec:	d9 1f       	adc	r29, r25
    13ee:	08 f4       	brcc	.+2      	; 0x13f2 <__muldi3_6+0x10>
    13f0:	31 96       	adiw	r30, 0x01	; 1
    13f2:	08 95       	ret

000013f4 <_exit>:
    13f4:	f8 94       	cli

000013f6 <__stop_program>:
    13f6:	ff cf       	rjmp	.-2      	; 0x13f6 <__stop_program>
